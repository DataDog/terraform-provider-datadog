/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SLOHistoryResponseData An array of service level objective objects.
type SLOHistoryResponseData struct {
	// The `from` timestamp in epoch seconds.
	FromTs  *int64             `json:"from_ts,omitempty"`
	Groups  *SLOHistorySLIData `json:"groups,omitempty"`
	Overall *SLOHistorySLIData `json:"overall,omitempty"`
	Series  *SLOHistoryMetrics `json:"series,omitempty"`
	// mapping of string timeframe to the SLO threshold.
	Thresholds *map[string]SLOThreshold `json:"thresholds,omitempty"`
	// The `to` timestamp in epoch seconds.
	ToTs   *int64          `json:"to_ts,omitempty"`
	Type   *SLOType        `json:"type,omitempty"`
	TypeId *SLOTypeNumeric `json:"type_id,omitempty"`
}

// NewSLOHistoryResponseData instantiates a new SLOHistoryResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLOHistoryResponseData() *SLOHistoryResponseData {
	this := SLOHistoryResponseData{}
	return &this
}

// NewSLOHistoryResponseDataWithDefaults instantiates a new SLOHistoryResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOHistoryResponseDataWithDefaults() *SLOHistoryResponseData {
	this := SLOHistoryResponseData{}
	return &this
}

// GetFromTs returns the FromTs field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetFromTs() int64 {
	if o == nil || o.FromTs == nil {
		var ret int64
		return ret
	}
	return *o.FromTs
}

// GetFromTsOk returns a tuple with the FromTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetFromTsOk() (*int64, bool) {
	if o == nil || o.FromTs == nil {
		return nil, false
	}
	return o.FromTs, true
}

// HasFromTs returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasFromTs() bool {
	if o != nil && o.FromTs != nil {
		return true
	}

	return false
}

// SetFromTs gets a reference to the given int64 and assigns it to the FromTs field.
func (o *SLOHistoryResponseData) SetFromTs(v int64) {
	o.FromTs = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetGroups() SLOHistorySLIData {
	if o == nil || o.Groups == nil {
		var ret SLOHistorySLIData
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetGroupsOk() (*SLOHistorySLIData, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given SLOHistorySLIData and assigns it to the Groups field.
func (o *SLOHistoryResponseData) SetGroups(v SLOHistorySLIData) {
	o.Groups = &v
}

// GetOverall returns the Overall field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetOverall() SLOHistorySLIData {
	if o == nil || o.Overall == nil {
		var ret SLOHistorySLIData
		return ret
	}
	return *o.Overall
}

// GetOverallOk returns a tuple with the Overall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetOverallOk() (*SLOHistorySLIData, bool) {
	if o == nil || o.Overall == nil {
		return nil, false
	}
	return o.Overall, true
}

// HasOverall returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasOverall() bool {
	if o != nil && o.Overall != nil {
		return true
	}

	return false
}

// SetOverall gets a reference to the given SLOHistorySLIData and assigns it to the Overall field.
func (o *SLOHistoryResponseData) SetOverall(v SLOHistorySLIData) {
	o.Overall = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetSeries() SLOHistoryMetrics {
	if o == nil || o.Series == nil {
		var ret SLOHistoryMetrics
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetSeriesOk() (*SLOHistoryMetrics, bool) {
	if o == nil || o.Series == nil {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasSeries() bool {
	if o != nil && o.Series != nil {
		return true
	}

	return false
}

// SetSeries gets a reference to the given SLOHistoryMetrics and assigns it to the Series field.
func (o *SLOHistoryResponseData) SetSeries(v SLOHistoryMetrics) {
	o.Series = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetThresholds() map[string]SLOThreshold {
	if o == nil || o.Thresholds == nil {
		var ret map[string]SLOThreshold
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetThresholdsOk() (*map[string]SLOThreshold, bool) {
	if o == nil || o.Thresholds == nil {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasThresholds() bool {
	if o != nil && o.Thresholds != nil {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given map[string]SLOThreshold and assigns it to the Thresholds field.
func (o *SLOHistoryResponseData) SetThresholds(v map[string]SLOThreshold) {
	o.Thresholds = &v
}

// GetToTs returns the ToTs field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetToTs() int64 {
	if o == nil || o.ToTs == nil {
		var ret int64
		return ret
	}
	return *o.ToTs
}

// GetToTsOk returns a tuple with the ToTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetToTsOk() (*int64, bool) {
	if o == nil || o.ToTs == nil {
		return nil, false
	}
	return o.ToTs, true
}

// HasToTs returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasToTs() bool {
	if o != nil && o.ToTs != nil {
		return true
	}

	return false
}

// SetToTs gets a reference to the given int64 and assigns it to the ToTs field.
func (o *SLOHistoryResponseData) SetToTs(v int64) {
	o.ToTs = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetType() SLOType {
	if o == nil || o.Type == nil {
		var ret SLOType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetTypeOk() (*SLOType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SLOType and assigns it to the Type field.
func (o *SLOHistoryResponseData) SetType(v SLOType) {
	o.Type = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *SLOHistoryResponseData) GetTypeId() SLOTypeNumeric {
	if o == nil || o.TypeId == nil {
		var ret SLOTypeNumeric
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseData) GetTypeIdOk() (*SLOTypeNumeric, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *SLOHistoryResponseData) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given SLOTypeNumeric and assigns it to the TypeId field.
func (o *SLOHistoryResponseData) SetTypeId(v SLOTypeNumeric) {
	o.TypeId = &v
}

func (o SLOHistoryResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromTs != nil {
		toSerialize["from_ts"] = o.FromTs
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Overall != nil {
		toSerialize["overall"] = o.Overall
	}
	if o.Series != nil {
		toSerialize["series"] = o.Series
	}
	if o.Thresholds != nil {
		toSerialize["thresholds"] = o.Thresholds
	}
	if o.ToTs != nil {
		toSerialize["to_ts"] = o.ToTs
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TypeId != nil {
		toSerialize["type_id"] = o.TypeId
	}
	return json.Marshal(toSerialize)
}

type NullableSLOHistoryResponseData struct {
	value *SLOHistoryResponseData
	isSet bool
}

func (v NullableSLOHistoryResponseData) Get() *SLOHistoryResponseData {
	return v.value
}

func (v *NullableSLOHistoryResponseData) Set(val *SLOHistoryResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSLOHistoryResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSLOHistoryResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLOHistoryResponseData(val *SLOHistoryResponseData) *NullableSLOHistoryResponseData {
	return &NullableSLOHistoryResponseData{value: val, isSet: true}
}

func (v NullableSLOHistoryResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLOHistoryResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
