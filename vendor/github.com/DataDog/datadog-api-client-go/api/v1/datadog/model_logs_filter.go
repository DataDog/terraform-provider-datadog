/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsFilter Filter for logs.
type LogsFilter struct {
	// The filter query.
	Query *string `json:"query,omitempty"`
}

// NewLogsFilter instantiates a new LogsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsFilter() *LogsFilter {
	this := LogsFilter{}
	return &this
}

// NewLogsFilterWithDefaults instantiates a new LogsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsFilterWithDefaults() *LogsFilter {
	this := LogsFilter{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *LogsFilter) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsFilter) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *LogsFilter) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *LogsFilter) SetQuery(v string) {
	o.Query = &v
}

func (o LogsFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableLogsFilter struct {
	value *LogsFilter
	isSet bool
}

func (v NullableLogsFilter) Get() *LogsFilter {
	return v.value
}

func (v *NullableLogsFilter) Set(val *LogsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsFilter(val *LogsFilter) *NullableLogsFilter {
	return &NullableLogsFilter{value: val, isSet: true}
}

func (v NullableLogsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
