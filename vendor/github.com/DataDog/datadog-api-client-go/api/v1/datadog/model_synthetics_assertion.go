/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SyntheticsAssertion - Object describing the assertions type, their associated operator, which property they apply, and upon which target.
type SyntheticsAssertion struct {
	SyntheticsAssertionJSONPathTarget *SyntheticsAssertionJSONPathTarget
	SyntheticsAssertionTarget         *SyntheticsAssertionTarget
}

// SyntheticsAssertionJSONPathTargetAsSyntheticsAssertion is a convenience function that returns SyntheticsAssertionJSONPathTarget wrapped in SyntheticsAssertion
func SyntheticsAssertionJSONPathTargetAsSyntheticsAssertion(v *SyntheticsAssertionJSONPathTarget) SyntheticsAssertion {
	return SyntheticsAssertion{SyntheticsAssertionJSONPathTarget: v}
}

// SyntheticsAssertionTargetAsSyntheticsAssertion is a convenience function that returns SyntheticsAssertionTarget wrapped in SyntheticsAssertion
func SyntheticsAssertionTargetAsSyntheticsAssertion(v *SyntheticsAssertionTarget) SyntheticsAssertion {
	return SyntheticsAssertion{SyntheticsAssertionTarget: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SyntheticsAssertion) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SyntheticsAssertionJSONPathTarget
	err = json.Unmarshal(data, &dst.SyntheticsAssertionJSONPathTarget)
	if err == nil {
		jsonSyntheticsAssertionJSONPathTarget, _ := json.Marshal(dst.SyntheticsAssertionJSONPathTarget)
		if string(jsonSyntheticsAssertionJSONPathTarget) == "{}" { // empty struct
			dst.SyntheticsAssertionJSONPathTarget = nil
		} else {
			match++
		}
	} else {
		dst.SyntheticsAssertionJSONPathTarget = nil
	}

	// try to unmarshal data into SyntheticsAssertionTarget
	err = json.Unmarshal(data, &dst.SyntheticsAssertionTarget)
	if err == nil {
		jsonSyntheticsAssertionTarget, _ := json.Marshal(dst.SyntheticsAssertionTarget)
		if string(jsonSyntheticsAssertionTarget) == "{}" { // empty struct
			dst.SyntheticsAssertionTarget = nil
		} else {
			match++
		}
	} else {
		dst.SyntheticsAssertionTarget = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SyntheticsAssertionJSONPathTarget = nil
		dst.SyntheticsAssertionTarget = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SyntheticsAssertion)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SyntheticsAssertion)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SyntheticsAssertion) MarshalJSON() ([]byte, error) {
	if src.SyntheticsAssertionJSONPathTarget != nil {
		return json.Marshal(&src.SyntheticsAssertionJSONPathTarget)
	}

	if src.SyntheticsAssertionTarget != nil {
		return json.Marshal(&src.SyntheticsAssertionTarget)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SyntheticsAssertion) GetActualInstance() interface{} {
	if obj.SyntheticsAssertionJSONPathTarget != nil {
		return obj.SyntheticsAssertionJSONPathTarget
	}

	if obj.SyntheticsAssertionTarget != nil {
		return obj.SyntheticsAssertionTarget
	}

	// all schemas are nil
	return nil
}

type NullableSyntheticsAssertion struct {
	value *SyntheticsAssertion
	isSet bool
}

func (v NullableSyntheticsAssertion) Get() *SyntheticsAssertion {
	return v.value
}

func (v *NullableSyntheticsAssertion) Set(val *SyntheticsAssertion) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsAssertion) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsAssertion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsAssertion(val *SyntheticsAssertion) *NullableSyntheticsAssertion {
	return &NullableSyntheticsAssertion{value: val, isSet: true}
}

func (v NullableSyntheticsAssertion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsAssertion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
