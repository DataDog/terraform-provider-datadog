/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsTestRequest Object describing the Synthetic test request.
type SyntheticsTestRequest struct {
	BasicAuth *SyntheticsBasicAuth `json:"basicAuth,omitempty"`
	// Body to include in the test.
	Body        *string                           `json:"body,omitempty"`
	Certificate *SyntheticsTestRequestCertificate `json:"certificate,omitempty"`
	// DNS server to use for DNS tests.
	DnsServer *string `json:"dnsServer,omitempty"`
	// Headers to include when performing the test.
	Headers *map[string]string `json:"headers,omitempty"`
	// Host name to perform the test with.
	Host   *string     `json:"host,omitempty"`
	Method *HTTPMethod `json:"method,omitempty"`
	// Port to use when performing the test.
	Port *int64 `json:"port,omitempty"`
	// Query to use for the test.
	Query *interface{} `json:"query,omitempty"`
	// Timeout in seconds for the test.
	Timeout *float64 `json:"timeout,omitempty"`
	// URL to perform the test with.
	Url *string `json:"url,omitempty"`
}

// NewSyntheticsTestRequest instantiates a new SyntheticsTestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsTestRequest() *SyntheticsTestRequest {
	this := SyntheticsTestRequest{}
	return &this
}

// NewSyntheticsTestRequestWithDefaults instantiates a new SyntheticsTestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsTestRequestWithDefaults() *SyntheticsTestRequest {
	this := SyntheticsTestRequest{}
	return &this
}

// GetBasicAuth returns the BasicAuth field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetBasicAuth() SyntheticsBasicAuth {
	if o == nil || o.BasicAuth == nil {
		var ret SyntheticsBasicAuth
		return ret
	}
	return *o.BasicAuth
}

// GetBasicAuthOk returns a tuple with the BasicAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetBasicAuthOk() (*SyntheticsBasicAuth, bool) {
	if o == nil || o.BasicAuth == nil {
		return nil, false
	}
	return o.BasicAuth, true
}

// HasBasicAuth returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasBasicAuth() bool {
	if o != nil && o.BasicAuth != nil {
		return true
	}

	return false
}

// SetBasicAuth gets a reference to the given SyntheticsBasicAuth and assigns it to the BasicAuth field.
func (o *SyntheticsTestRequest) SetBasicAuth(v SyntheticsBasicAuth) {
	o.BasicAuth = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *SyntheticsTestRequest) SetBody(v string) {
	o.Body = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetCertificate() SyntheticsTestRequestCertificate {
	if o == nil || o.Certificate == nil {
		var ret SyntheticsTestRequestCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetCertificateOk() (*SyntheticsTestRequestCertificate, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given SyntheticsTestRequestCertificate and assigns it to the Certificate field.
func (o *SyntheticsTestRequest) SetCertificate(v SyntheticsTestRequestCertificate) {
	o.Certificate = &v
}

// GetDnsServer returns the DnsServer field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetDnsServer() string {
	if o == nil || o.DnsServer == nil {
		var ret string
		return ret
	}
	return *o.DnsServer
}

// GetDnsServerOk returns a tuple with the DnsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetDnsServerOk() (*string, bool) {
	if o == nil || o.DnsServer == nil {
		return nil, false
	}
	return o.DnsServer, true
}

// HasDnsServer returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasDnsServer() bool {
	if o != nil && o.DnsServer != nil {
		return true
	}

	return false
}

// SetDnsServer gets a reference to the given string and assigns it to the DnsServer field.
func (o *SyntheticsTestRequest) SetDnsServer(v string) {
	o.DnsServer = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetHeaders() map[string]string {
	if o == nil || o.Headers == nil {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *SyntheticsTestRequest) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *SyntheticsTestRequest) SetHost(v string) {
	o.Host = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetMethod() HTTPMethod {
	if o == nil || o.Method == nil {
		var ret HTTPMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetMethodOk() (*HTTPMethod, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given HTTPMethod and assigns it to the Method field.
func (o *SyntheticsTestRequest) SetMethod(v HTTPMethod) {
	o.Method = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *SyntheticsTestRequest) SetPort(v int64) {
	o.Port = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetQuery() interface{} {
	if o == nil || o.Query == nil {
		var ret interface{}
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetQueryOk() (*interface{}, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given interface{} and assigns it to the Query field.
func (o *SyntheticsTestRequest) SetQuery(v interface{}) {
	o.Query = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetTimeout() float64 {
	if o == nil || o.Timeout == nil {
		var ret float64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetTimeoutOk() (*float64, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given float64 and assigns it to the Timeout field.
func (o *SyntheticsTestRequest) SetTimeout(v float64) {
	o.Timeout = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SyntheticsTestRequest) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsTestRequest) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SyntheticsTestRequest) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SyntheticsTestRequest) SetUrl(v string) {
	o.Url = &v
}

func (o SyntheticsTestRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BasicAuth != nil {
		toSerialize["basicAuth"] = o.BasicAuth
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.DnsServer != nil {
		toSerialize["dnsServer"] = o.DnsServer
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsTestRequest struct {
	value *SyntheticsTestRequest
	isSet bool
}

func (v NullableSyntheticsTestRequest) Get() *SyntheticsTestRequest {
	return v.value
}

func (v *NullableSyntheticsTestRequest) Set(val *SyntheticsTestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsTestRequest(val *SyntheticsTestRequest) *NullableSyntheticsTestRequest {
	return &NullableSyntheticsTestRequest{value: val, isSet: true}
}

func (v NullableSyntheticsTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
