/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SyntheticsTickInterval The frequency at which to run the Synthetic test (in seconds).
type SyntheticsTickInterval int64

// List of SyntheticsTickInterval
const (
	SYNTHETICSTICKINTERVAL_MINUTE          SyntheticsTickInterval = 60
	SYNTHETICSTICKINTERVAL_FIVE_MINUTES    SyntheticsTickInterval = 300
	SYNTHETICSTICKINTERVAL_FIFTEEN_MINUTES SyntheticsTickInterval = 900
	SYNTHETICSTICKINTERVAL_THIRTY_MINUTES  SyntheticsTickInterval = 1800
	SYNTHETICSTICKINTERVAL_HOUR            SyntheticsTickInterval = 3600
	SYNTHETICSTICKINTERVAL_SIX_HOURS       SyntheticsTickInterval = 21600
	SYNTHETICSTICKINTERVAL_TWELVE_HOURS    SyntheticsTickInterval = 43200
	SYNTHETICSTICKINTERVAL_DAY             SyntheticsTickInterval = 86400
	SYNTHETICSTICKINTERVAL_WEEK            SyntheticsTickInterval = 604800
)

var allowedSyntheticsTickIntervalEnumValues = []SyntheticsTickInterval{
	60,
	300,
	900,
	1800,
	3600,
	21600,
	43200,
	86400,
	604800,
}

func (v *SyntheticsTickInterval) UnmarshalJSON(src []byte) error {
	var value int64
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyntheticsTickInterval(value)
	for _, existing := range allowedSyntheticsTickIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyntheticsTickInterval", value)
}

// NewSyntheticsTickIntervalFromValue returns a pointer to a valid SyntheticsTickInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyntheticsTickIntervalFromValue(v int64) (*SyntheticsTickInterval, error) {
	ev := SyntheticsTickInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SyntheticsTickInterval: valid values are %v", v, allowedSyntheticsTickIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyntheticsTickInterval) IsValid() bool {
	for _, existing := range allowedSyntheticsTickIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyntheticsTickInterval value
func (v SyntheticsTickInterval) Ptr() *SyntheticsTickInterval {
	return &v
}

type NullableSyntheticsTickInterval struct {
	value *SyntheticsTickInterval
	isSet bool
}

func (v NullableSyntheticsTickInterval) Get() *SyntheticsTickInterval {
	return v.value
}

func (v *NullableSyntheticsTickInterval) Set(val *SyntheticsTickInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsTickInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsTickInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsTickInterval(val *SyntheticsTickInterval) *NullableSyntheticsTickInterval {
	return &NullableSyntheticsTickInterval{value: val, isSet: true}
}

func (v NullableSyntheticsTickInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsTickInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
