/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageNetworkFlowsHour Number of netflow events indexed for each hour for a given organization.
type UsageNetworkFlowsHour struct {
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
	// Contains the number of netflow events indexed.
	IndexedEventCount *int64 `json:"indexed_event_count,omitempty"`
}

// NewUsageNetworkFlowsHour instantiates a new UsageNetworkFlowsHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageNetworkFlowsHour() *UsageNetworkFlowsHour {
	this := UsageNetworkFlowsHour{}
	return &this
}

// NewUsageNetworkFlowsHourWithDefaults instantiates a new UsageNetworkFlowsHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageNetworkFlowsHourWithDefaults() *UsageNetworkFlowsHour {
	this := UsageNetworkFlowsHour{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageNetworkFlowsHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageNetworkFlowsHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageNetworkFlowsHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageNetworkFlowsHour) SetHour(v time.Time) {
	o.Hour = &v
}

// GetIndexedEventCount returns the IndexedEventCount field value if set, zero value otherwise.
func (o *UsageNetworkFlowsHour) GetIndexedEventCount() int64 {
	if o == nil || o.IndexedEventCount == nil {
		var ret int64
		return ret
	}
	return *o.IndexedEventCount
}

// GetIndexedEventCountOk returns a tuple with the IndexedEventCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageNetworkFlowsHour) GetIndexedEventCountOk() (*int64, bool) {
	if o == nil || o.IndexedEventCount == nil {
		return nil, false
	}
	return o.IndexedEventCount, true
}

// HasIndexedEventCount returns a boolean if a field has been set.
func (o *UsageNetworkFlowsHour) HasIndexedEventCount() bool {
	if o != nil && o.IndexedEventCount != nil {
		return true
	}

	return false
}

// SetIndexedEventCount gets a reference to the given int64 and assigns it to the IndexedEventCount field.
func (o *UsageNetworkFlowsHour) SetIndexedEventCount(v int64) {
	o.IndexedEventCount = &v
}

func (o UsageNetworkFlowsHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.IndexedEventCount != nil {
		toSerialize["indexed_event_count"] = o.IndexedEventCount
	}
	return json.Marshal(toSerialize)
}

type NullableUsageNetworkFlowsHour struct {
	value *UsageNetworkFlowsHour
	isSet bool
}

func (v NullableUsageNetworkFlowsHour) Get() *UsageNetworkFlowsHour {
	return v.value
}

func (v *NullableUsageNetworkFlowsHour) Set(val *UsageNetworkFlowsHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageNetworkFlowsHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageNetworkFlowsHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageNetworkFlowsHour(val *UsageNetworkFlowsHour) *NullableUsageNetworkFlowsHour {
	return &NullableUsageNetworkFlowsHour{value: val, isSet: true}
}

func (v NullableUsageNetworkFlowsHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageNetworkFlowsHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
