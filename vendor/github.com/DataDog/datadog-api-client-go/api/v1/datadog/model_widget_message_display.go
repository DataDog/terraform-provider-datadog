/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// WidgetMessageDisplay Amount of log lines to display
type WidgetMessageDisplay string

// List of WidgetMessageDisplay
const (
	WIDGETMESSAGEDISPLAY_INLINE          WidgetMessageDisplay = "inline"
	WIDGETMESSAGEDISPLAY_EXPANDED_MEDIUM WidgetMessageDisplay = "expanded-md"
	WIDGETMESSAGEDISPLAY_EXPANDED_LARGE  WidgetMessageDisplay = "expanded-lg"
)

func (v *WidgetMessageDisplay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetMessageDisplay(value)
	for _, existing := range []WidgetMessageDisplay{"inline", "expanded-md", "expanded-lg"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetMessageDisplay", value)
}

// Ptr returns reference to WidgetMessageDisplay value
func (v WidgetMessageDisplay) Ptr() *WidgetMessageDisplay {
	return &v
}

type NullableWidgetMessageDisplay struct {
	value *WidgetMessageDisplay
	isSet bool
}

func (v NullableWidgetMessageDisplay) Get() *WidgetMessageDisplay {
	return v.value
}

func (v *NullableWidgetMessageDisplay) Set(val *WidgetMessageDisplay) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetMessageDisplay) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetMessageDisplay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetMessageDisplay(val *WidgetMessageDisplay) *NullableWidgetMessageDisplay {
	return &NullableWidgetMessageDisplay{value: val, isSet: true}
}

func (v NullableWidgetMessageDisplay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetMessageDisplay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
