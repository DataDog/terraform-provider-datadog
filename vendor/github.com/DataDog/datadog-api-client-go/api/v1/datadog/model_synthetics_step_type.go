/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SyntheticsStepType Step type used in your Synthetic test.
type SyntheticsStepType string

// List of SyntheticsStepType
const (
	SYNTHETICSSTEPTYPE_ASSERT_CURRENT_URL        SyntheticsStepType = "assertCurrentUrl"
	SYNTHETICSSTEPTYPE_ASSERT_ELEMENT_CONTENT    SyntheticsStepType = "assertElementContent"
	SYNTHETICSSTEPTYPE_ASSERT_ELEMENT_PRESENT    SyntheticsStepType = "assertElementPresent"
	SYNTHETICSSTEPTYPE_ASSERT_EMAIL              SyntheticsStepType = "assertEmail"
	SYNTHETICSSTEPTYPE_ASSERT_PAGE_CONTAINS      SyntheticsStepType = "assertPageContains"
	SYNTHETICSSTEPTYPE_ASSERT_PAGE_LACKS         SyntheticsStepType = "assertPageLacks"
	SYNTHETICSSTEPTYPE_CLICK                     SyntheticsStepType = "click"
	SYNTHETICSSTEPTYPE_EXTRACT_VARIABLE          SyntheticsStepType = "extractVariable"
	SYNTHETICSSTEPTYPE_GO_TO_EMAIL_LINK          SyntheticsStepType = "goToEmailLink"
	SYNTHETICSSTEPTYPE_GO_TO_URL                 SyntheticsStepType = "goToUrl"
	SYNTHETICSSTEPTYPE_GO_TO_URL_AND_MEASURE_TTI SyntheticsStepType = "goToUrlAndMeasureTti"
	SYNTHETICSSTEPTYPE_HOVER                     SyntheticsStepType = "hover"
	SYNTHETICSSTEPTYPE_PLAY_SUB_TEST             SyntheticsStepType = "playSubTest"
	SYNTHETICSSTEPTYPE_PRESS_KEY                 SyntheticsStepType = "pressKey"
	SYNTHETICSSTEPTYPE_REFRESH                   SyntheticsStepType = "refresh"
	SYNTHETICSSTEPTYPE_SELECT_OPTION             SyntheticsStepType = "selectOption"
	SYNTHETICSSTEPTYPE_TYPE_TEXT                 SyntheticsStepType = "typeText"
	SYNTHETICSSTEPTYPE_UPLOAD_FILES              SyntheticsStepType = "uploadFiles"
	SYNTHETICSSTEPTYPE_WAIT                      SyntheticsStepType = "wait"
)

func (v *SyntheticsStepType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyntheticsStepType(value)
	for _, existing := range []SyntheticsStepType{"assertCurrentUrl", "assertElementContent", "assertElementPresent", "assertEmail", "assertPageContains", "assertPageLacks", "click", "extractVariable", "goToEmailLink", "goToUrl", "goToUrlAndMeasureTti", "hover", "playSubTest", "pressKey", "refresh", "selectOption", "typeText", "uploadFiles", "wait"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyntheticsStepType", value)
}

// Ptr returns reference to SyntheticsStepType value
func (v SyntheticsStepType) Ptr() *SyntheticsStepType {
	return &v
}

type NullableSyntheticsStepType struct {
	value *SyntheticsStepType
	isSet bool
}

func (v NullableSyntheticsStepType) Get() *SyntheticsStepType {
	return v.value
}

func (v *NullableSyntheticsStepType) Set(val *SyntheticsStepType) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsStepType) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsStepType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsStepType(val *SyntheticsStepType) *NullableSyntheticsStepType {
	return &NullableSyntheticsStepType{value: val, isSet: true}
}

func (v NullableSyntheticsStepType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsStepType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
