/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsCITestMetadata Metadata for the Synthetics tests run
type SyntheticsCITestMetadata struct {
	Ci  *SyntheticsCITestMetadataCi  `json:"ci,omitempty"`
	Git *SyntheticsCITestMetadataGit `json:"git,omitempty"`
}

// NewSyntheticsCITestMetadata instantiates a new SyntheticsCITestMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsCITestMetadata() *SyntheticsCITestMetadata {
	this := SyntheticsCITestMetadata{}
	return &this
}

// NewSyntheticsCITestMetadataWithDefaults instantiates a new SyntheticsCITestMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsCITestMetadataWithDefaults() *SyntheticsCITestMetadata {
	this := SyntheticsCITestMetadata{}
	return &this
}

// GetCi returns the Ci field value if set, zero value otherwise.
func (o *SyntheticsCITestMetadata) GetCi() SyntheticsCITestMetadataCi {
	if o == nil || o.Ci == nil {
		var ret SyntheticsCITestMetadataCi
		return ret
	}
	return *o.Ci
}

// GetCiOk returns a tuple with the Ci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsCITestMetadata) GetCiOk() (*SyntheticsCITestMetadataCi, bool) {
	if o == nil || o.Ci == nil {
		return nil, false
	}
	return o.Ci, true
}

// HasCi returns a boolean if a field has been set.
func (o *SyntheticsCITestMetadata) HasCi() bool {
	if o != nil && o.Ci != nil {
		return true
	}

	return false
}

// SetCi gets a reference to the given SyntheticsCITestMetadataCi and assigns it to the Ci field.
func (o *SyntheticsCITestMetadata) SetCi(v SyntheticsCITestMetadataCi) {
	o.Ci = &v
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *SyntheticsCITestMetadata) GetGit() SyntheticsCITestMetadataGit {
	if o == nil || o.Git == nil {
		var ret SyntheticsCITestMetadataGit
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsCITestMetadata) GetGitOk() (*SyntheticsCITestMetadataGit, bool) {
	if o == nil || o.Git == nil {
		return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *SyntheticsCITestMetadata) HasGit() bool {
	if o != nil && o.Git != nil {
		return true
	}

	return false
}

// SetGit gets a reference to the given SyntheticsCITestMetadataGit and assigns it to the Git field.
func (o *SyntheticsCITestMetadata) SetGit(v SyntheticsCITestMetadataGit) {
	o.Git = &v
}

func (o SyntheticsCITestMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ci != nil {
		toSerialize["ci"] = o.Ci
	}
	if o.Git != nil {
		toSerialize["git"] = o.Git
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsCITestMetadata struct {
	value *SyntheticsCITestMetadata
	isSet bool
}

func (v NullableSyntheticsCITestMetadata) Get() *SyntheticsCITestMetadata {
	return v.value
}

func (v *NullableSyntheticsCITestMetadata) Set(val *SyntheticsCITestMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsCITestMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsCITestMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsCITestMetadata(val *SyntheticsCITestMetadata) *NullableSyntheticsCITestMetadata {
	return &NullableSyntheticsCITestMetadata{value: val, isSet: true}
}

func (v NullableSyntheticsCITestMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsCITestMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
