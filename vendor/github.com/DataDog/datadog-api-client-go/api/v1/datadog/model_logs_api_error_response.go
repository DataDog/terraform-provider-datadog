/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsAPIErrorResponse Response returned by the Logs API when errors occur.
type LogsAPIErrorResponse struct {
	Error *LogsAPIError `json:"error,omitempty"`
}

// NewLogsAPIErrorResponse instantiates a new LogsAPIErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAPIErrorResponse() *LogsAPIErrorResponse {
	this := LogsAPIErrorResponse{}
	return &this
}

// NewLogsAPIErrorResponseWithDefaults instantiates a new LogsAPIErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAPIErrorResponseWithDefaults() *LogsAPIErrorResponse {
	this := LogsAPIErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *LogsAPIErrorResponse) GetError() LogsAPIError {
	if o == nil || o.Error == nil {
		var ret LogsAPIError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAPIErrorResponse) GetErrorOk() (*LogsAPIError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *LogsAPIErrorResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given LogsAPIError and assigns it to the Error field.
func (o *LogsAPIErrorResponse) SetError(v LogsAPIError) {
	o.Error = &v
}

func (o LogsAPIErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableLogsAPIErrorResponse struct {
	value *LogsAPIErrorResponse
	isSet bool
}

func (v NullableLogsAPIErrorResponse) Get() *LogsAPIErrorResponse {
	return v.value
}

func (v *NullableLogsAPIErrorResponse) Set(val *LogsAPIErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAPIErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAPIErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAPIErrorResponse(val *LogsAPIErrorResponse) *NullableLogsAPIErrorResponse {
	return &NullableLogsAPIErrorResponse{value: val, isSet: true}
}

func (v NullableLogsAPIErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAPIErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
