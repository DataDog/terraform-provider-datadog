/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// WidgetLegendSize Available legend sizes for a widget.
type WidgetLegendSize string

// List of WidgetLegendSize
const (
	WIDGETLEGENDSIZE_ZERO    WidgetLegendSize = "0"
	WIDGETLEGENDSIZE_TWO     WidgetLegendSize = "2"
	WIDGETLEGENDSIZE_FOUR    WidgetLegendSize = "4"
	WIDGETLEGENDSIZE_EIGHT   WidgetLegendSize = "8"
	WIDGETLEGENDSIZE_SIXTEEN WidgetLegendSize = "16"
	WIDGETLEGENDSIZE_AUTO    WidgetLegendSize = "auto"
)

func (v *WidgetLegendSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetLegendSize(value)
	for _, existing := range []WidgetLegendSize{"0", "2", "4", "8", "16", "auto"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetLegendSize", *v)
}

// Ptr returns reference to WidgetLegendSize value
func (v WidgetLegendSize) Ptr() *WidgetLegendSize {
	return &v
}

type NullableWidgetLegendSize struct {
	value *WidgetLegendSize
	isSet bool
}

func (v NullableWidgetLegendSize) Get() *WidgetLegendSize {
	return v.value
}

func (v *NullableWidgetLegendSize) Set(val *WidgetLegendSize) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetLegendSize) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetLegendSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetLegendSize(val *WidgetLegendSize) *NullableWidgetLegendSize {
	return &NullableWidgetLegendSize{value: val, isSet: true}
}

func (v NullableWidgetLegendSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetLegendSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
