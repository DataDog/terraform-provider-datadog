/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// CheckCanDeleteMonitorResponseData Wrapper object with the list of monitor IDs.
type CheckCanDeleteMonitorResponseData struct {
	// An array of of Monitor IDs that can be safely deleted.
	Ok *[]int64 `json:"ok,omitempty"`
}

// NewCheckCanDeleteMonitorResponseData instantiates a new CheckCanDeleteMonitorResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCanDeleteMonitorResponseData() *CheckCanDeleteMonitorResponseData {
	this := CheckCanDeleteMonitorResponseData{}
	return &this
}

// NewCheckCanDeleteMonitorResponseDataWithDefaults instantiates a new CheckCanDeleteMonitorResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCanDeleteMonitorResponseDataWithDefaults() *CheckCanDeleteMonitorResponseData {
	this := CheckCanDeleteMonitorResponseData{}
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *CheckCanDeleteMonitorResponseData) GetOk() []int64 {
	if o == nil || o.Ok == nil {
		var ret []int64
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCanDeleteMonitorResponseData) GetOkOk() (*[]int64, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *CheckCanDeleteMonitorResponseData) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given []int64 and assigns it to the Ok field.
func (o *CheckCanDeleteMonitorResponseData) SetOk(v []int64) {
	o.Ok = &v
}

func (o CheckCanDeleteMonitorResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableCheckCanDeleteMonitorResponseData struct {
	value *CheckCanDeleteMonitorResponseData
	isSet bool
}

func (v NullableCheckCanDeleteMonitorResponseData) Get() *CheckCanDeleteMonitorResponseData {
	return v.value
}

func (v *NullableCheckCanDeleteMonitorResponseData) Set(val *CheckCanDeleteMonitorResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCanDeleteMonitorResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCanDeleteMonitorResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCanDeleteMonitorResponseData(val *CheckCanDeleteMonitorResponseData) *NullableCheckCanDeleteMonitorResponseData {
	return &NullableCheckCanDeleteMonitorResponseData{value: val, isSet: true}
}

func (v NullableCheckCanDeleteMonitorResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCanDeleteMonitorResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
