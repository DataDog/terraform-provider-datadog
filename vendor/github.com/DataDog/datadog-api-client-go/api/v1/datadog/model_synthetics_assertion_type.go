/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SyntheticsAssertionType Type of the assertion.
type SyntheticsAssertionType string

// List of SyntheticsAssertionType
const (
	SYNTHETICSASSERTIONTYPE_BODY          SyntheticsAssertionType = "body"
	SYNTHETICSASSERTIONTYPE_HEADER        SyntheticsAssertionType = "header"
	SYNTHETICSASSERTIONTYPE_STATUS_CODE   SyntheticsAssertionType = "statusCode"
	SYNTHETICSASSERTIONTYPE_CERTIFICATE   SyntheticsAssertionType = "certificate"
	SYNTHETICSASSERTIONTYPE_RESPONSE_TIME SyntheticsAssertionType = "responseTime"
	SYNTHETICSASSERTIONTYPE_PROPERTY      SyntheticsAssertionType = "property"
	SYNTHETICSASSERTIONTYPE_RECORD_EVERY  SyntheticsAssertionType = "recordEvery"
	SYNTHETICSASSERTIONTYPE_RECORD_SOME   SyntheticsAssertionType = "recordSome"
)

func (v *SyntheticsAssertionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyntheticsAssertionType(value)
	for _, existing := range []SyntheticsAssertionType{"body", "header", "statusCode", "certificate", "responseTime", "property", "recordEvery", "recordSome"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyntheticsAssertionType", value)
}

// Ptr returns reference to SyntheticsAssertionType value
func (v SyntheticsAssertionType) Ptr() *SyntheticsAssertionType {
	return &v
}

type NullableSyntheticsAssertionType struct {
	value *SyntheticsAssertionType
	isSet bool
}

func (v NullableSyntheticsAssertionType) Get() *SyntheticsAssertionType {
	return v.value
}

func (v *NullableSyntheticsAssertionType) Set(val *SyntheticsAssertionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsAssertionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsAssertionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsAssertionType(val *SyntheticsAssertionType) *NullableSyntheticsAssertionType {
	return &NullableSyntheticsAssertionType{value: val, isSet: true}
}

func (v NullableSyntheticsAssertionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsAssertionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
