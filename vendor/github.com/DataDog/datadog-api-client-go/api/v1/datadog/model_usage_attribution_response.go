/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UsageAttributionResponse Response containing the Usage Summary by tag(s).
type UsageAttributionResponse struct {
	Metadata *UsageAttributionMetadata `json:"metadata,omitempty"`
	// Get Usage Summary by tag(s).
	Usage *[]UsageAttributionBody `json:"usage,omitempty"`
}

// NewUsageAttributionResponse instantiates a new UsageAttributionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageAttributionResponse() *UsageAttributionResponse {
	this := UsageAttributionResponse{}
	return &this
}

// NewUsageAttributionResponseWithDefaults instantiates a new UsageAttributionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageAttributionResponseWithDefaults() *UsageAttributionResponse {
	this := UsageAttributionResponse{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UsageAttributionResponse) GetMetadata() UsageAttributionMetadata {
	if o == nil || o.Metadata == nil {
		var ret UsageAttributionMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionResponse) GetMetadataOk() (*UsageAttributionMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UsageAttributionResponse) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given UsageAttributionMetadata and assigns it to the Metadata field.
func (o *UsageAttributionResponse) SetMetadata(v UsageAttributionMetadata) {
	o.Metadata = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *UsageAttributionResponse) GetUsage() []UsageAttributionBody {
	if o == nil || o.Usage == nil {
		var ret []UsageAttributionBody
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionResponse) GetUsageOk() (*[]UsageAttributionBody, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *UsageAttributionResponse) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []UsageAttributionBody and assigns it to the Usage field.
func (o *UsageAttributionResponse) SetUsage(v []UsageAttributionBody) {
	o.Usage = &v
}

func (o UsageAttributionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableUsageAttributionResponse struct {
	value *UsageAttributionResponse
	isSet bool
}

func (v NullableUsageAttributionResponse) Get() *UsageAttributionResponse {
	return v.value
}

func (v *NullableUsageAttributionResponse) Set(val *UsageAttributionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageAttributionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageAttributionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageAttributionResponse(val *UsageAttributionResponse) *NullableUsageAttributionResponse {
	return &NullableUsageAttributionResponse{value: val, isSet: true}
}

func (v NullableUsageAttributionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageAttributionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
