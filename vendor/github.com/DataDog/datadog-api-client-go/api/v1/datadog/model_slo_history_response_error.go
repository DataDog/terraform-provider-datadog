/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SLOHistoryResponseError A service level objective response containing the requested history.
type SLOHistoryResponseError struct {
	// Human readable error.
	Error *string `json:"error,omitempty"`
}

// NewSLOHistoryResponseError instantiates a new SLOHistoryResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLOHistoryResponseError() *SLOHistoryResponseError {
	this := SLOHistoryResponseError{}
	return &this
}

// NewSLOHistoryResponseErrorWithDefaults instantiates a new SLOHistoryResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOHistoryResponseErrorWithDefaults() *SLOHistoryResponseError {
	this := SLOHistoryResponseError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SLOHistoryResponseError) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOHistoryResponseError) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SLOHistoryResponseError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SLOHistoryResponseError) SetError(v string) {
	o.Error = &v
}

func (o SLOHistoryResponseError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSLOHistoryResponseError struct {
	value *SLOHistoryResponseError
	isSet bool
}

func (v NullableSLOHistoryResponseError) Get() *SLOHistoryResponseError {
	return v.value
}

func (v *NullableSLOHistoryResponseError) Set(val *SLOHistoryResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableSLOHistoryResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableSLOHistoryResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLOHistoryResponseError(val *SLOHistoryResponseError) *NullableSLOHistoryResponseError {
	return &NullableSLOHistoryResponseError{value: val, isSet: true}
}

func (v NullableSLOHistoryResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLOHistoryResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
