/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageRumSessionsHour Number of RUM Sessions recorded for each hour for a given organization.
type UsageRumSessionsHour struct {
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
	// Contains the number of RUM Sessions.
	SessionCount *int64 `json:"session_count,omitempty"`
	// Contains the number of mobile RUM Sessions on Android (data available beginning December 1, 2020).
	SessionCountAndroid *int64 `json:"session_count_android,omitempty"`
	// Contains the number of mobile RUM Sessions on iOS (data available beginning December 1, 2020).
	SessionCountIos *int64 `json:"session_count_ios,omitempty"`
}

// NewUsageRumSessionsHour instantiates a new UsageRumSessionsHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageRumSessionsHour() *UsageRumSessionsHour {
	this := UsageRumSessionsHour{}
	return &this
}

// NewUsageRumSessionsHourWithDefaults instantiates a new UsageRumSessionsHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageRumSessionsHourWithDefaults() *UsageRumSessionsHour {
	this := UsageRumSessionsHour{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageRumSessionsHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageRumSessionsHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageRumSessionsHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageRumSessionsHour) SetHour(v time.Time) {
	o.Hour = &v
}

// GetSessionCount returns the SessionCount field value if set, zero value otherwise.
func (o *UsageRumSessionsHour) GetSessionCount() int64 {
	if o == nil || o.SessionCount == nil {
		var ret int64
		return ret
	}
	return *o.SessionCount
}

// GetSessionCountOk returns a tuple with the SessionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageRumSessionsHour) GetSessionCountOk() (*int64, bool) {
	if o == nil || o.SessionCount == nil {
		return nil, false
	}
	return o.SessionCount, true
}

// HasSessionCount returns a boolean if a field has been set.
func (o *UsageRumSessionsHour) HasSessionCount() bool {
	if o != nil && o.SessionCount != nil {
		return true
	}

	return false
}

// SetSessionCount gets a reference to the given int64 and assigns it to the SessionCount field.
func (o *UsageRumSessionsHour) SetSessionCount(v int64) {
	o.SessionCount = &v
}

// GetSessionCountAndroid returns the SessionCountAndroid field value if set, zero value otherwise.
func (o *UsageRumSessionsHour) GetSessionCountAndroid() int64 {
	if o == nil || o.SessionCountAndroid == nil {
		var ret int64
		return ret
	}
	return *o.SessionCountAndroid
}

// GetSessionCountAndroidOk returns a tuple with the SessionCountAndroid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageRumSessionsHour) GetSessionCountAndroidOk() (*int64, bool) {
	if o == nil || o.SessionCountAndroid == nil {
		return nil, false
	}
	return o.SessionCountAndroid, true
}

// HasSessionCountAndroid returns a boolean if a field has been set.
func (o *UsageRumSessionsHour) HasSessionCountAndroid() bool {
	if o != nil && o.SessionCountAndroid != nil {
		return true
	}

	return false
}

// SetSessionCountAndroid gets a reference to the given int64 and assigns it to the SessionCountAndroid field.
func (o *UsageRumSessionsHour) SetSessionCountAndroid(v int64) {
	o.SessionCountAndroid = &v
}

// GetSessionCountIos returns the SessionCountIos field value if set, zero value otherwise.
func (o *UsageRumSessionsHour) GetSessionCountIos() int64 {
	if o == nil || o.SessionCountIos == nil {
		var ret int64
		return ret
	}
	return *o.SessionCountIos
}

// GetSessionCountIosOk returns a tuple with the SessionCountIos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageRumSessionsHour) GetSessionCountIosOk() (*int64, bool) {
	if o == nil || o.SessionCountIos == nil {
		return nil, false
	}
	return o.SessionCountIos, true
}

// HasSessionCountIos returns a boolean if a field has been set.
func (o *UsageRumSessionsHour) HasSessionCountIos() bool {
	if o != nil && o.SessionCountIos != nil {
		return true
	}

	return false
}

// SetSessionCountIos gets a reference to the given int64 and assigns it to the SessionCountIos field.
func (o *UsageRumSessionsHour) SetSessionCountIos(v int64) {
	o.SessionCountIos = &v
}

func (o UsageRumSessionsHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.SessionCount != nil {
		toSerialize["session_count"] = o.SessionCount
	}
	if o.SessionCountAndroid != nil {
		toSerialize["session_count_android"] = o.SessionCountAndroid
	}
	if o.SessionCountIos != nil {
		toSerialize["session_count_ios"] = o.SessionCountIos
	}
	return json.Marshal(toSerialize)
}

type NullableUsageRumSessionsHour struct {
	value *UsageRumSessionsHour
	isSet bool
}

func (v NullableUsageRumSessionsHour) Get() *UsageRumSessionsHour {
	return v.value
}

func (v *NullableUsageRumSessionsHour) Set(val *UsageRumSessionsHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageRumSessionsHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageRumSessionsHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageRumSessionsHour(val *UsageRumSessionsHour) *NullableUsageRumSessionsHour {
	return &NullableUsageRumSessionsHour{value: val, isSet: true}
}

func (v NullableUsageRumSessionsHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageRumSessionsHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
