/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageAttributionBody Usage Summary by tag for a given organization.
type UsageAttributionBody struct {
	// Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM].
	Month *time.Time `json:"month,omitempty"`
	// The organization public ID.
	PublicId *string `json:"public_id,omitempty"`
	// Usage Summary by tag name.
	Tags *map[string][]string `json:"tags,omitempty"`
	// Shows the the most recent hour in the current months for all organizations for which all usages were calculated.
	UpdatedAt *string                 `json:"updated_at,omitempty"`
	Values    *UsageAttributionValues `json:"values,omitempty"`
}

// NewUsageAttributionBody instantiates a new UsageAttributionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageAttributionBody() *UsageAttributionBody {
	this := UsageAttributionBody{}
	return &this
}

// NewUsageAttributionBodyWithDefaults instantiates a new UsageAttributionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageAttributionBodyWithDefaults() *UsageAttributionBody {
	this := UsageAttributionBody{}
	return &this
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *UsageAttributionBody) GetMonth() time.Time {
	if o == nil || o.Month == nil {
		var ret time.Time
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionBody) GetMonthOk() (*time.Time, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *UsageAttributionBody) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given time.Time and assigns it to the Month field.
func (o *UsageAttributionBody) SetMonth(v time.Time) {
	o.Month = &v
}

// GetPublicId returns the PublicId field value if set, zero value otherwise.
func (o *UsageAttributionBody) GetPublicId() string {
	if o == nil || o.PublicId == nil {
		var ret string
		return ret
	}
	return *o.PublicId
}

// GetPublicIdOk returns a tuple with the PublicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionBody) GetPublicIdOk() (*string, bool) {
	if o == nil || o.PublicId == nil {
		return nil, false
	}
	return o.PublicId, true
}

// HasPublicId returns a boolean if a field has been set.
func (o *UsageAttributionBody) HasPublicId() bool {
	if o != nil && o.PublicId != nil {
		return true
	}

	return false
}

// SetPublicId gets a reference to the given string and assigns it to the PublicId field.
func (o *UsageAttributionBody) SetPublicId(v string) {
	o.PublicId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UsageAttributionBody) GetTags() map[string][]string {
	if o == nil || o.Tags == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionBody) GetTagsOk() (*map[string][]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UsageAttributionBody) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string][]string and assigns it to the Tags field.
func (o *UsageAttributionBody) SetTags(v map[string][]string) {
	o.Tags = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UsageAttributionBody) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionBody) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UsageAttributionBody) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UsageAttributionBody) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *UsageAttributionBody) GetValues() UsageAttributionValues {
	if o == nil || o.Values == nil {
		var ret UsageAttributionValues
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAttributionBody) GetValuesOk() (*UsageAttributionValues, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *UsageAttributionBody) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given UsageAttributionValues and assigns it to the Values field.
func (o *UsageAttributionBody) SetValues(v UsageAttributionValues) {
	o.Values = &v
}

func (o UsageAttributionBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.PublicId != nil {
		toSerialize["public_id"] = o.PublicId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableUsageAttributionBody struct {
	value *UsageAttributionBody
	isSet bool
}

func (v NullableUsageAttributionBody) Get() *UsageAttributionBody {
	return v.value
}

func (v *NullableUsageAttributionBody) Set(val *UsageAttributionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageAttributionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageAttributionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageAttributionBody(val *UsageAttributionBody) *NullableUsageAttributionBody {
	return &NullableUsageAttributionBody{value: val, isSet: true}
}

func (v NullableUsageAttributionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageAttributionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
