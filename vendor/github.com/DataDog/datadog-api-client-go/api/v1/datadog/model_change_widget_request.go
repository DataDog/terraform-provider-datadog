/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// ChangeWidgetRequest Updated change widget.
type ChangeWidgetRequest struct {
	ApmQuery   *LogQueryDefinition `json:"apm_query,omitempty"`
	ChangeType *WidgetChangeType   `json:"change_type,omitempty"`
	CompareTo  *WidgetCompareTo    `json:"compare_to,omitempty"`
	EventQuery *LogQueryDefinition `json:"event_query,omitempty"`
	// Whether to show increase as good.
	IncreaseGood *bool                   `json:"increase_good,omitempty"`
	LogQuery     *LogQueryDefinition     `json:"log_query,omitempty"`
	NetworkQuery *LogQueryDefinition     `json:"network_query,omitempty"`
	OrderBy      *WidgetOrderBy          `json:"order_by,omitempty"`
	OrderDir     *WidgetSort             `json:"order_dir,omitempty"`
	ProcessQuery *ProcessQueryDefinition `json:"process_query,omitempty"`
	// Query definition.
	Q             *string             `json:"q,omitempty"`
	RumQuery      *LogQueryDefinition `json:"rum_query,omitempty"`
	SecurityQuery *LogQueryDefinition `json:"security_query,omitempty"`
	// Whether to show the present value.
	ShowPresent *bool `json:"show_present,omitempty"`
}

// NewChangeWidgetRequest instantiates a new ChangeWidgetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeWidgetRequest() *ChangeWidgetRequest {
	this := ChangeWidgetRequest{}
	return &this
}

// NewChangeWidgetRequestWithDefaults instantiates a new ChangeWidgetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeWidgetRequestWithDefaults() *ChangeWidgetRequest {
	this := ChangeWidgetRequest{}
	return &this
}

// GetApmQuery returns the ApmQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetApmQuery() LogQueryDefinition {
	if o == nil || o.ApmQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.ApmQuery
}

// GetApmQueryOk returns a tuple with the ApmQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetApmQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.ApmQuery == nil {
		return nil, false
	}
	return o.ApmQuery, true
}

// HasApmQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasApmQuery() bool {
	if o != nil && o.ApmQuery != nil {
		return true
	}

	return false
}

// SetApmQuery gets a reference to the given LogQueryDefinition and assigns it to the ApmQuery field.
func (o *ChangeWidgetRequest) SetApmQuery(v LogQueryDefinition) {
	o.ApmQuery = &v
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetChangeType() WidgetChangeType {
	if o == nil || o.ChangeType == nil {
		var ret WidgetChangeType
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetChangeTypeOk() (*WidgetChangeType, bool) {
	if o == nil || o.ChangeType == nil {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasChangeType() bool {
	if o != nil && o.ChangeType != nil {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given WidgetChangeType and assigns it to the ChangeType field.
func (o *ChangeWidgetRequest) SetChangeType(v WidgetChangeType) {
	o.ChangeType = &v
}

// GetCompareTo returns the CompareTo field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetCompareTo() WidgetCompareTo {
	if o == nil || o.CompareTo == nil {
		var ret WidgetCompareTo
		return ret
	}
	return *o.CompareTo
}

// GetCompareToOk returns a tuple with the CompareTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetCompareToOk() (*WidgetCompareTo, bool) {
	if o == nil || o.CompareTo == nil {
		return nil, false
	}
	return o.CompareTo, true
}

// HasCompareTo returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasCompareTo() bool {
	if o != nil && o.CompareTo != nil {
		return true
	}

	return false
}

// SetCompareTo gets a reference to the given WidgetCompareTo and assigns it to the CompareTo field.
func (o *ChangeWidgetRequest) SetCompareTo(v WidgetCompareTo) {
	o.CompareTo = &v
}

// GetEventQuery returns the EventQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetEventQuery() LogQueryDefinition {
	if o == nil || o.EventQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.EventQuery
}

// GetEventQueryOk returns a tuple with the EventQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetEventQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.EventQuery == nil {
		return nil, false
	}
	return o.EventQuery, true
}

// HasEventQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasEventQuery() bool {
	if o != nil && o.EventQuery != nil {
		return true
	}

	return false
}

// SetEventQuery gets a reference to the given LogQueryDefinition and assigns it to the EventQuery field.
func (o *ChangeWidgetRequest) SetEventQuery(v LogQueryDefinition) {
	o.EventQuery = &v
}

// GetIncreaseGood returns the IncreaseGood field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetIncreaseGood() bool {
	if o == nil || o.IncreaseGood == nil {
		var ret bool
		return ret
	}
	return *o.IncreaseGood
}

// GetIncreaseGoodOk returns a tuple with the IncreaseGood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetIncreaseGoodOk() (*bool, bool) {
	if o == nil || o.IncreaseGood == nil {
		return nil, false
	}
	return o.IncreaseGood, true
}

// HasIncreaseGood returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasIncreaseGood() bool {
	if o != nil && o.IncreaseGood != nil {
		return true
	}

	return false
}

// SetIncreaseGood gets a reference to the given bool and assigns it to the IncreaseGood field.
func (o *ChangeWidgetRequest) SetIncreaseGood(v bool) {
	o.IncreaseGood = &v
}

// GetLogQuery returns the LogQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetLogQuery() LogQueryDefinition {
	if o == nil || o.LogQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.LogQuery
}

// GetLogQueryOk returns a tuple with the LogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetLogQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.LogQuery == nil {
		return nil, false
	}
	return o.LogQuery, true
}

// HasLogQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasLogQuery() bool {
	if o != nil && o.LogQuery != nil {
		return true
	}

	return false
}

// SetLogQuery gets a reference to the given LogQueryDefinition and assigns it to the LogQuery field.
func (o *ChangeWidgetRequest) SetLogQuery(v LogQueryDefinition) {
	o.LogQuery = &v
}

// GetNetworkQuery returns the NetworkQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetNetworkQuery() LogQueryDefinition {
	if o == nil || o.NetworkQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.NetworkQuery
}

// GetNetworkQueryOk returns a tuple with the NetworkQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetNetworkQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.NetworkQuery == nil {
		return nil, false
	}
	return o.NetworkQuery, true
}

// HasNetworkQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasNetworkQuery() bool {
	if o != nil && o.NetworkQuery != nil {
		return true
	}

	return false
}

// SetNetworkQuery gets a reference to the given LogQueryDefinition and assigns it to the NetworkQuery field.
func (o *ChangeWidgetRequest) SetNetworkQuery(v LogQueryDefinition) {
	o.NetworkQuery = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetOrderBy() WidgetOrderBy {
	if o == nil || o.OrderBy == nil {
		var ret WidgetOrderBy
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetOrderByOk() (*WidgetOrderBy, bool) {
	if o == nil || o.OrderBy == nil {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasOrderBy() bool {
	if o != nil && o.OrderBy != nil {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given WidgetOrderBy and assigns it to the OrderBy field.
func (o *ChangeWidgetRequest) SetOrderBy(v WidgetOrderBy) {
	o.OrderBy = &v
}

// GetOrderDir returns the OrderDir field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetOrderDir() WidgetSort {
	if o == nil || o.OrderDir == nil {
		var ret WidgetSort
		return ret
	}
	return *o.OrderDir
}

// GetOrderDirOk returns a tuple with the OrderDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetOrderDirOk() (*WidgetSort, bool) {
	if o == nil || o.OrderDir == nil {
		return nil, false
	}
	return o.OrderDir, true
}

// HasOrderDir returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasOrderDir() bool {
	if o != nil && o.OrderDir != nil {
		return true
	}

	return false
}

// SetOrderDir gets a reference to the given WidgetSort and assigns it to the OrderDir field.
func (o *ChangeWidgetRequest) SetOrderDir(v WidgetSort) {
	o.OrderDir = &v
}

// GetProcessQuery returns the ProcessQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetProcessQuery() ProcessQueryDefinition {
	if o == nil || o.ProcessQuery == nil {
		var ret ProcessQueryDefinition
		return ret
	}
	return *o.ProcessQuery
}

// GetProcessQueryOk returns a tuple with the ProcessQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetProcessQueryOk() (*ProcessQueryDefinition, bool) {
	if o == nil || o.ProcessQuery == nil {
		return nil, false
	}
	return o.ProcessQuery, true
}

// HasProcessQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasProcessQuery() bool {
	if o != nil && o.ProcessQuery != nil {
		return true
	}

	return false
}

// SetProcessQuery gets a reference to the given ProcessQueryDefinition and assigns it to the ProcessQuery field.
func (o *ChangeWidgetRequest) SetProcessQuery(v ProcessQueryDefinition) {
	o.ProcessQuery = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetQ() string {
	if o == nil || o.Q == nil {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetQOk() (*string, bool) {
	if o == nil || o.Q == nil {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasQ() bool {
	if o != nil && o.Q != nil {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *ChangeWidgetRequest) SetQ(v string) {
	o.Q = &v
}

// GetRumQuery returns the RumQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetRumQuery() LogQueryDefinition {
	if o == nil || o.RumQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.RumQuery
}

// GetRumQueryOk returns a tuple with the RumQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetRumQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.RumQuery == nil {
		return nil, false
	}
	return o.RumQuery, true
}

// HasRumQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasRumQuery() bool {
	if o != nil && o.RumQuery != nil {
		return true
	}

	return false
}

// SetRumQuery gets a reference to the given LogQueryDefinition and assigns it to the RumQuery field.
func (o *ChangeWidgetRequest) SetRumQuery(v LogQueryDefinition) {
	o.RumQuery = &v
}

// GetSecurityQuery returns the SecurityQuery field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetSecurityQuery() LogQueryDefinition {
	if o == nil || o.SecurityQuery == nil {
		var ret LogQueryDefinition
		return ret
	}
	return *o.SecurityQuery
}

// GetSecurityQueryOk returns a tuple with the SecurityQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetSecurityQueryOk() (*LogQueryDefinition, bool) {
	if o == nil || o.SecurityQuery == nil {
		return nil, false
	}
	return o.SecurityQuery, true
}

// HasSecurityQuery returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasSecurityQuery() bool {
	if o != nil && o.SecurityQuery != nil {
		return true
	}

	return false
}

// SetSecurityQuery gets a reference to the given LogQueryDefinition and assigns it to the SecurityQuery field.
func (o *ChangeWidgetRequest) SetSecurityQuery(v LogQueryDefinition) {
	o.SecurityQuery = &v
}

// GetShowPresent returns the ShowPresent field value if set, zero value otherwise.
func (o *ChangeWidgetRequest) GetShowPresent() bool {
	if o == nil || o.ShowPresent == nil {
		var ret bool
		return ret
	}
	return *o.ShowPresent
}

// GetShowPresentOk returns a tuple with the ShowPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeWidgetRequest) GetShowPresentOk() (*bool, bool) {
	if o == nil || o.ShowPresent == nil {
		return nil, false
	}
	return o.ShowPresent, true
}

// HasShowPresent returns a boolean if a field has been set.
func (o *ChangeWidgetRequest) HasShowPresent() bool {
	if o != nil && o.ShowPresent != nil {
		return true
	}

	return false
}

// SetShowPresent gets a reference to the given bool and assigns it to the ShowPresent field.
func (o *ChangeWidgetRequest) SetShowPresent(v bool) {
	o.ShowPresent = &v
}

func (o ChangeWidgetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApmQuery != nil {
		toSerialize["apm_query"] = o.ApmQuery
	}
	if o.ChangeType != nil {
		toSerialize["change_type"] = o.ChangeType
	}
	if o.CompareTo != nil {
		toSerialize["compare_to"] = o.CompareTo
	}
	if o.EventQuery != nil {
		toSerialize["event_query"] = o.EventQuery
	}
	if o.IncreaseGood != nil {
		toSerialize["increase_good"] = o.IncreaseGood
	}
	if o.LogQuery != nil {
		toSerialize["log_query"] = o.LogQuery
	}
	if o.NetworkQuery != nil {
		toSerialize["network_query"] = o.NetworkQuery
	}
	if o.OrderBy != nil {
		toSerialize["order_by"] = o.OrderBy
	}
	if o.OrderDir != nil {
		toSerialize["order_dir"] = o.OrderDir
	}
	if o.ProcessQuery != nil {
		toSerialize["process_query"] = o.ProcessQuery
	}
	if o.Q != nil {
		toSerialize["q"] = o.Q
	}
	if o.RumQuery != nil {
		toSerialize["rum_query"] = o.RumQuery
	}
	if o.SecurityQuery != nil {
		toSerialize["security_query"] = o.SecurityQuery
	}
	if o.ShowPresent != nil {
		toSerialize["show_present"] = o.ShowPresent
	}
	return json.Marshal(toSerialize)
}

type NullableChangeWidgetRequest struct {
	value *ChangeWidgetRequest
	isSet bool
}

func (v NullableChangeWidgetRequest) Get() *ChangeWidgetRequest {
	return v.value
}

func (v *NullableChangeWidgetRequest) Set(val *ChangeWidgetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeWidgetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeWidgetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeWidgetRequest(val *ChangeWidgetRequest) *NullableChangeWidgetRequest {
	return &NullableChangeWidgetRequest{value: val, isSet: true}
}

func (v NullableChangeWidgetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeWidgetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
