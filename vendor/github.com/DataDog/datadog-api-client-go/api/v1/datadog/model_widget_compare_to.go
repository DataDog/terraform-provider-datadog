/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// WidgetCompareTo Timeframe used for the change comparison.
type WidgetCompareTo string

// List of WidgetCompareTo
const (
	WIDGETCOMPARETO_HOUR_BEFORE  WidgetCompareTo = "hour_before"
	WIDGETCOMPARETO_DAY_BEFORE   WidgetCompareTo = "day_before"
	WIDGETCOMPARETO_WEEK_BEFORE  WidgetCompareTo = "week_before"
	WIDGETCOMPARETO_MONTH_BEFORE WidgetCompareTo = "month_before"
)

func (v *WidgetCompareTo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetCompareTo(value)
	for _, existing := range []WidgetCompareTo{"hour_before", "day_before", "week_before", "month_before"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetCompareTo", value)
}

// Ptr returns reference to WidgetCompareTo value
func (v WidgetCompareTo) Ptr() *WidgetCompareTo {
	return &v
}

type NullableWidgetCompareTo struct {
	value *WidgetCompareTo
	isSet bool
}

func (v NullableWidgetCompareTo) Get() *WidgetCompareTo {
	return v.value
}

func (v *NullableWidgetCompareTo) Set(val *WidgetCompareTo) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetCompareTo) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetCompareTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetCompareTo(val *WidgetCompareTo) *NullableWidgetCompareTo {
	return &NullableWidgetCompareTo{value: val, isSet: true}
}

func (v NullableWidgetCompareTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetCompareTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
