/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// SyntheticsDeleteTestsResponseDeletedTests Object containing a deleted Synthetic test ID with the associated deletion timestamp.
type SyntheticsDeleteTestsResponseDeletedTests struct {
	// Deletion timestamp of the Synthetic test ID.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The Synthetic test ID deleted.
	PublicId *string `json:"public_id,omitempty"`
}

// NewSyntheticsDeleteTestsResponseDeletedTests instantiates a new SyntheticsDeleteTestsResponseDeletedTests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsDeleteTestsResponseDeletedTests() *SyntheticsDeleteTestsResponseDeletedTests {
	this := SyntheticsDeleteTestsResponseDeletedTests{}
	return &this
}

// NewSyntheticsDeleteTestsResponseDeletedTestsWithDefaults instantiates a new SyntheticsDeleteTestsResponseDeletedTests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsDeleteTestsResponseDeletedTestsWithDefaults() *SyntheticsDeleteTestsResponseDeletedTests {
	this := SyntheticsDeleteTestsResponseDeletedTests{}
	return &this
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SyntheticsDeleteTestsResponseDeletedTests) GetDeletedAt() time.Time {
	if o == nil || o.DeletedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsDeleteTestsResponseDeletedTests) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SyntheticsDeleteTestsResponseDeletedTests) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *SyntheticsDeleteTestsResponseDeletedTests) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetPublicId returns the PublicId field value if set, zero value otherwise.
func (o *SyntheticsDeleteTestsResponseDeletedTests) GetPublicId() string {
	if o == nil || o.PublicId == nil {
		var ret string
		return ret
	}
	return *o.PublicId
}

// GetPublicIdOk returns a tuple with the PublicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsDeleteTestsResponseDeletedTests) GetPublicIdOk() (*string, bool) {
	if o == nil || o.PublicId == nil {
		return nil, false
	}
	return o.PublicId, true
}

// HasPublicId returns a boolean if a field has been set.
func (o *SyntheticsDeleteTestsResponseDeletedTests) HasPublicId() bool {
	if o != nil && o.PublicId != nil {
		return true
	}

	return false
}

// SetPublicId gets a reference to the given string and assigns it to the PublicId field.
func (o *SyntheticsDeleteTestsResponseDeletedTests) SetPublicId(v string) {
	o.PublicId = &v
}

func (o SyntheticsDeleteTestsResponseDeletedTests) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeletedAt != nil {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.PublicId != nil {
		toSerialize["public_id"] = o.PublicId
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsDeleteTestsResponseDeletedTests struct {
	value *SyntheticsDeleteTestsResponseDeletedTests
	isSet bool
}

func (v NullableSyntheticsDeleteTestsResponseDeletedTests) Get() *SyntheticsDeleteTestsResponseDeletedTests {
	return v.value
}

func (v *NullableSyntheticsDeleteTestsResponseDeletedTests) Set(val *SyntheticsDeleteTestsResponseDeletedTests) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsDeleteTestsResponseDeletedTests) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsDeleteTestsResponseDeletedTests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsDeleteTestsResponseDeletedTests(val *SyntheticsDeleteTestsResponseDeletedTests) *NullableSyntheticsDeleteTestsResponseDeletedTests {
	return &NullableSyntheticsDeleteTestsResponseDeletedTests{value: val, isSet: true}
}

func (v NullableSyntheticsDeleteTestsResponseDeletedTests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsDeleteTestsResponseDeletedTests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
