/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// WidgetDefinition Definition of the widget.
type WidgetDefinition struct {
	WidgetDefinitionInterface interface{ GetType() string }
}

func (s WidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.WidgetDefinitionInterface)
}

func (s *WidgetDefinition) UnmarshalJSON(src []byte) error {
	var err error
	var unmarshaled map[string]interface{}
	err = json.Unmarshal(src, &unmarshaled)
	if err != nil {
		return err
	}
	if v, ok := unmarshaled["type"]; ok {
		switch v {
		case "alert_graph":
			var result *AlertGraphWidgetDefinition = &AlertGraphWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "alert_value":
			var result *AlertValueWidgetDefinition = &AlertValueWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "change":
			var result *ChangeWidgetDefinition = &ChangeWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "check_status":
			var result *CheckStatusWidgetDefinition = &CheckStatusWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "distribution":
			var result *DistributionWidgetDefinition = &DistributionWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "event_stream":
			var result *EventStreamWidgetDefinition = &EventStreamWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "event_timeline":
			var result *EventTimelineWidgetDefinition = &EventTimelineWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "free_text":
			var result *FreeTextWidgetDefinition = &FreeTextWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "group":
			var result *GroupWidgetDefinition = &GroupWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "heatmap":
			var result *HeatMapWidgetDefinition = &HeatMapWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "hostmap":
			var result *HostMapWidgetDefinition = &HostMapWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "iframe":
			var result *IFrameWidgetDefinition = &IFrameWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "image":
			var result *ImageWidgetDefinition = &ImageWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "log_stream":
			var result *LogStreamWidgetDefinition = &LogStreamWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "manage_status":
			var result *MonitorSummaryWidgetDefinition = &MonitorSummaryWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "note":
			var result *NoteWidgetDefinition = &NoteWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "query_table":
			var result *TableWidgetDefinition = &TableWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "query_value":
			var result *QueryValueWidgetDefinition = &QueryValueWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "scatterplot":
			var result *ScatterPlotWidgetDefinition = &ScatterPlotWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "servicemap":
			var result *ServiceMapWidgetDefinition = &ServiceMapWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "slo":
			var result *SLOWidgetDefinition = &SLOWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "timeseries":
			var result *TimeseriesWidgetDefinition = &TimeseriesWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "toplist":
			var result *ToplistWidgetDefinition = &ToplistWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		case "trace_service":
			var result *ServiceSummaryWidgetDefinition = &ServiceSummaryWidgetDefinition{}
			err = json.Unmarshal(src, result)
			if err != nil {
				return err
			}
			s.WidgetDefinitionInterface = result
			return nil
		default:
			return fmt.Errorf("No oneOf model has 'type' equal to %s", v)
		}
	} else {
		return fmt.Errorf("Discriminator property 'type' not found in unmarshaled payload: %+v", unmarshaled)
	}
}

type NullableWidgetDefinition struct {
	value *WidgetDefinition
	isSet bool
}

func (v NullableWidgetDefinition) Get() *WidgetDefinition {
	return v.value
}

func (v *NullableWidgetDefinition) Set(val *WidgetDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetDefinition(val *WidgetDefinition) *NullableWidgetDefinition {
	return &NullableWidgetDefinition{value: val, isSet: true}
}

func (v NullableWidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
