/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsConfigVariable Object defining a variable that can be used in your test configuration.
type SyntheticsConfigVariable struct {
	// Example for the variable.
	Example string `json:"example"`
	// Name of the variable.
	Name string `json:"name"`
	// Pattern of the variable.
	Pattern *string                      `json:"pattern,omitempty"`
	Type    SyntheticsConfigVariableType `json:"type"`
}

// NewSyntheticsConfigVariable instantiates a new SyntheticsConfigVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsConfigVariable(example string, name string, type_ SyntheticsConfigVariableType) *SyntheticsConfigVariable {
	this := SyntheticsConfigVariable{}
	this.Example = example
	this.Name = name
	this.Type = type_
	return &this
}

// NewSyntheticsConfigVariableWithDefaults instantiates a new SyntheticsConfigVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsConfigVariableWithDefaults() *SyntheticsConfigVariable {
	this := SyntheticsConfigVariable{}
	return &this
}

// GetExample returns the Example field value
func (o *SyntheticsConfigVariable) GetExample() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Example
}

// GetExampleOk returns a tuple with the Example field value
// and a boolean to check if the value has been set.
func (o *SyntheticsConfigVariable) GetExampleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Example, true
}

// SetExample sets field value
func (o *SyntheticsConfigVariable) SetExample(v string) {
	o.Example = v
}

// GetName returns the Name field value
func (o *SyntheticsConfigVariable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SyntheticsConfigVariable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SyntheticsConfigVariable) SetName(v string) {
	o.Name = v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *SyntheticsConfigVariable) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsConfigVariable) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *SyntheticsConfigVariable) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *SyntheticsConfigVariable) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value
func (o *SyntheticsConfigVariable) GetType() SyntheticsConfigVariableType {
	if o == nil {
		var ret SyntheticsConfigVariableType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SyntheticsConfigVariable) GetTypeOk() (*SyntheticsConfigVariableType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SyntheticsConfigVariable) SetType(v SyntheticsConfigVariableType) {
	o.Type = v
}

func (o SyntheticsConfigVariable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["example"] = o.Example
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsConfigVariable struct {
	value *SyntheticsConfigVariable
	isSet bool
}

func (v NullableSyntheticsConfigVariable) Get() *SyntheticsConfigVariable {
	return v.value
}

func (v *NullableSyntheticsConfigVariable) Set(val *SyntheticsConfigVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsConfigVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsConfigVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsConfigVariable(val *SyntheticsConfigVariable) *NullableSyntheticsConfigVariable {
	return &NullableSyntheticsConfigVariable{value: val, isSet: true}
}

func (v NullableSyntheticsConfigVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsConfigVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
