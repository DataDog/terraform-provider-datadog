/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// TagToHosts In this object, the key is the tag, the value is a list of host names that are reporting that tag.
type TagToHosts struct {
	// A list of tags to apply to the host.
	Tags *map[string][]string `json:"tags,omitempty"`
}

// NewTagToHosts instantiates a new TagToHosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagToHosts() *TagToHosts {
	this := TagToHosts{}
	return &this
}

// NewTagToHostsWithDefaults instantiates a new TagToHosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagToHostsWithDefaults() *TagToHosts {
	this := TagToHosts{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TagToHosts) GetTags() map[string][]string {
	if o == nil || o.Tags == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagToHosts) GetTagsOk() (*map[string][]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagToHosts) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string][]string and assigns it to the Tags field.
func (o *TagToHosts) SetTags(v map[string][]string) {
	o.Tags = &v
}

func (o TagToHosts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableTagToHosts struct {
	value *TagToHosts
	isSet bool
}

func (v NullableTagToHosts) Get() *TagToHosts {
	return v.value
}

func (v *NullableTagToHosts) Set(val *TagToHosts) {
	v.value = val
	v.isSet = true
}

func (v NullableTagToHosts) IsSet() bool {
	return v.isSet
}

func (v *NullableTagToHosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagToHosts(val *TagToHosts) *NullableTagToHosts {
	return &NullableTagToHosts{value: val, isSet: true}
}

func (v NullableTagToHosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagToHosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
