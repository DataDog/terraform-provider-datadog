/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsDeleteTestsPayload A JSON list of the ID or IDs of the Synthetic tests that you want to delete.
type SyntheticsDeleteTestsPayload struct {
	// An array of Synthetic test IDs you want to delete.
	PublicIds *[]string `json:"public_ids,omitempty"`
}

// NewSyntheticsDeleteTestsPayload instantiates a new SyntheticsDeleteTestsPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsDeleteTestsPayload() *SyntheticsDeleteTestsPayload {
	this := SyntheticsDeleteTestsPayload{}
	return &this
}

// NewSyntheticsDeleteTestsPayloadWithDefaults instantiates a new SyntheticsDeleteTestsPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsDeleteTestsPayloadWithDefaults() *SyntheticsDeleteTestsPayload {
	this := SyntheticsDeleteTestsPayload{}
	return &this
}

// GetPublicIds returns the PublicIds field value if set, zero value otherwise.
func (o *SyntheticsDeleteTestsPayload) GetPublicIds() []string {
	if o == nil || o.PublicIds == nil {
		var ret []string
		return ret
	}
	return *o.PublicIds
}

// GetPublicIdsOk returns a tuple with the PublicIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsDeleteTestsPayload) GetPublicIdsOk() (*[]string, bool) {
	if o == nil || o.PublicIds == nil {
		return nil, false
	}
	return o.PublicIds, true
}

// HasPublicIds returns a boolean if a field has been set.
func (o *SyntheticsDeleteTestsPayload) HasPublicIds() bool {
	if o != nil && o.PublicIds != nil {
		return true
	}

	return false
}

// SetPublicIds gets a reference to the given []string and assigns it to the PublicIds field.
func (o *SyntheticsDeleteTestsPayload) SetPublicIds(v []string) {
	o.PublicIds = &v
}

func (o SyntheticsDeleteTestsPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicIds != nil {
		toSerialize["public_ids"] = o.PublicIds
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsDeleteTestsPayload struct {
	value *SyntheticsDeleteTestsPayload
	isSet bool
}

func (v NullableSyntheticsDeleteTestsPayload) Get() *SyntheticsDeleteTestsPayload {
	return v.value
}

func (v *NullableSyntheticsDeleteTestsPayload) Set(val *SyntheticsDeleteTestsPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsDeleteTestsPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsDeleteTestsPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsDeleteTestsPayload(val *SyntheticsDeleteTestsPayload) *NullableSyntheticsDeleteTestsPayload {
	return &NullableSyntheticsDeleteTestsPayload{value: val, isSet: true}
}

func (v NullableSyntheticsDeleteTestsPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsDeleteTestsPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
