/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageIngestedSpansHour Ingested spans usage for a given organization for a given hour.
type UsageIngestedSpansHour struct {
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
	// Contains the total number of bytes ingested during a given hour.
	IngestedEventsBytes *int64 `json:"ingested_events_bytes,omitempty"`
}

// NewUsageIngestedSpansHour instantiates a new UsageIngestedSpansHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageIngestedSpansHour() *UsageIngestedSpansHour {
	this := UsageIngestedSpansHour{}
	return &this
}

// NewUsageIngestedSpansHourWithDefaults instantiates a new UsageIngestedSpansHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageIngestedSpansHourWithDefaults() *UsageIngestedSpansHour {
	this := UsageIngestedSpansHour{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageIngestedSpansHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageIngestedSpansHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageIngestedSpansHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageIngestedSpansHour) SetHour(v time.Time) {
	o.Hour = &v
}

// GetIngestedEventsBytes returns the IngestedEventsBytes field value if set, zero value otherwise.
func (o *UsageIngestedSpansHour) GetIngestedEventsBytes() int64 {
	if o == nil || o.IngestedEventsBytes == nil {
		var ret int64
		return ret
	}
	return *o.IngestedEventsBytes
}

// GetIngestedEventsBytesOk returns a tuple with the IngestedEventsBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageIngestedSpansHour) GetIngestedEventsBytesOk() (*int64, bool) {
	if o == nil || o.IngestedEventsBytes == nil {
		return nil, false
	}
	return o.IngestedEventsBytes, true
}

// HasIngestedEventsBytes returns a boolean if a field has been set.
func (o *UsageIngestedSpansHour) HasIngestedEventsBytes() bool {
	if o != nil && o.IngestedEventsBytes != nil {
		return true
	}

	return false
}

// SetIngestedEventsBytes gets a reference to the given int64 and assigns it to the IngestedEventsBytes field.
func (o *UsageIngestedSpansHour) SetIngestedEventsBytes(v int64) {
	o.IngestedEventsBytes = &v
}

func (o UsageIngestedSpansHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.IngestedEventsBytes != nil {
		toSerialize["ingested_events_bytes"] = o.IngestedEventsBytes
	}
	return json.Marshal(toSerialize)
}

type NullableUsageIngestedSpansHour struct {
	value *UsageIngestedSpansHour
	isSet bool
}

func (v NullableUsageIngestedSpansHour) Get() *UsageIngestedSpansHour {
	return v.value
}

func (v *NullableUsageIngestedSpansHour) Set(val *UsageIngestedSpansHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageIngestedSpansHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageIngestedSpansHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageIngestedSpansHour(val *UsageIngestedSpansHour) *NullableUsageIngestedSpansHour {
	return &NullableUsageIngestedSpansHour{value: val, isSet: true}
}

func (v NullableUsageIngestedSpansHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageIngestedSpansHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
