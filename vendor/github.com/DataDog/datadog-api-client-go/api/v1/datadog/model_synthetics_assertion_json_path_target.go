/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsAssertionJSONPathTarget An assertion for the `validatesJSONPath` operator.
type SyntheticsAssertionJSONPathTarget struct {
	Operator SyntheticsAssertionJSONPathOperator `json:"operator"`
	// The associated assertion property.
	Property *string                                  `json:"property,omitempty"`
	Target   *SyntheticsAssertionJSONPathTargetTarget `json:"target,omitempty"`
	Type     SyntheticsAssertionType                  `json:"type"`
}

// NewSyntheticsAssertionJSONPathTarget instantiates a new SyntheticsAssertionJSONPathTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsAssertionJSONPathTarget(operator SyntheticsAssertionJSONPathOperator, type_ SyntheticsAssertionType) *SyntheticsAssertionJSONPathTarget {
	this := SyntheticsAssertionJSONPathTarget{}
	this.Operator = operator
	this.Type = type_
	return &this
}

// NewSyntheticsAssertionJSONPathTargetWithDefaults instantiates a new SyntheticsAssertionJSONPathTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsAssertionJSONPathTargetWithDefaults() *SyntheticsAssertionJSONPathTarget {
	this := SyntheticsAssertionJSONPathTarget{}
	return &this
}

// GetOperator returns the Operator field value
func (o *SyntheticsAssertionJSONPathTarget) GetOperator() SyntheticsAssertionJSONPathOperator {
	if o == nil {
		var ret SyntheticsAssertionJSONPathOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *SyntheticsAssertionJSONPathTarget) GetOperatorOk() (*SyntheticsAssertionJSONPathOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *SyntheticsAssertionJSONPathTarget) SetOperator(v SyntheticsAssertionJSONPathOperator) {
	o.Operator = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *SyntheticsAssertionJSONPathTarget) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsAssertionJSONPathTarget) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *SyntheticsAssertionJSONPathTarget) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *SyntheticsAssertionJSONPathTarget) SetProperty(v string) {
	o.Property = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SyntheticsAssertionJSONPathTarget) GetTarget() SyntheticsAssertionJSONPathTargetTarget {
	if o == nil || o.Target == nil {
		var ret SyntheticsAssertionJSONPathTargetTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsAssertionJSONPathTarget) GetTargetOk() (*SyntheticsAssertionJSONPathTargetTarget, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SyntheticsAssertionJSONPathTarget) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given SyntheticsAssertionJSONPathTargetTarget and assigns it to the Target field.
func (o *SyntheticsAssertionJSONPathTarget) SetTarget(v SyntheticsAssertionJSONPathTargetTarget) {
	o.Target = &v
}

// GetType returns the Type field value
func (o *SyntheticsAssertionJSONPathTarget) GetType() SyntheticsAssertionType {
	if o == nil {
		var ret SyntheticsAssertionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SyntheticsAssertionJSONPathTarget) GetTypeOk() (*SyntheticsAssertionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SyntheticsAssertionJSONPathTarget) SetType(v SyntheticsAssertionType) {
	o.Type = v
}

func (o SyntheticsAssertionJSONPathTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsAssertionJSONPathTarget struct {
	value *SyntheticsAssertionJSONPathTarget
	isSet bool
}

func (v NullableSyntheticsAssertionJSONPathTarget) Get() *SyntheticsAssertionJSONPathTarget {
	return v.value
}

func (v *NullableSyntheticsAssertionJSONPathTarget) Set(val *SyntheticsAssertionJSONPathTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsAssertionJSONPathTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsAssertionJSONPathTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsAssertionJSONPathTarget(val *SyntheticsAssertionJSONPathTarget) *NullableSyntheticsAssertionJSONPathTarget {
	return &NullableSyntheticsAssertionJSONPathTarget{value: val, isSet: true}
}

func (v NullableSyntheticsAssertionJSONPathTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsAssertionJSONPathTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
