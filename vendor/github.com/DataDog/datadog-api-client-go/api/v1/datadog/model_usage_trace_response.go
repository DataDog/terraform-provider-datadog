/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UsageTraceResponse A response containing trace usage.
type UsageTraceResponse struct {
	// Array with the number of hourly traces indexed for a given organization.
	Usage *[]UsageTraceHour `json:"usage,omitempty"`
}

// NewUsageTraceResponse instantiates a new UsageTraceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageTraceResponse() *UsageTraceResponse {
	this := UsageTraceResponse{}
	return &this
}

// NewUsageTraceResponseWithDefaults instantiates a new UsageTraceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageTraceResponseWithDefaults() *UsageTraceResponse {
	this := UsageTraceResponse{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *UsageTraceResponse) GetUsage() []UsageTraceHour {
	if o == nil || o.Usage == nil {
		var ret []UsageTraceHour
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageTraceResponse) GetUsageOk() (*[]UsageTraceHour, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *UsageTraceResponse) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []UsageTraceHour and assigns it to the Usage field.
func (o *UsageTraceResponse) SetUsage(v []UsageTraceHour) {
	o.Usage = &v
}

func (o UsageTraceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableUsageTraceResponse struct {
	value *UsageTraceResponse
	isSet bool
}

func (v NullableUsageTraceResponse) Get() *UsageTraceResponse {
	return v.value
}

func (v *NullableUsageTraceResponse) Set(val *UsageTraceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageTraceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageTraceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageTraceResponse(val *UsageTraceResponse) *NullableUsageTraceResponse {
	return &NullableUsageTraceResponse{value: val, isSet: true}
}

func (v NullableUsageTraceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageTraceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
