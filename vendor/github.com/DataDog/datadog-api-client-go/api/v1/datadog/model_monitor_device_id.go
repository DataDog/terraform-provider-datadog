/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// MonitorDeviceID ID of the device the Synthetics monitor is running on. Same as `SyntheticsDeviceID`.
type MonitorDeviceID string

// List of MonitorDeviceID
const (
	MONITORDEVICEID_LAPTOP_LARGE         MonitorDeviceID = "laptop_large"
	MONITORDEVICEID_TABLET               MonitorDeviceID = "tablet"
	MONITORDEVICEID_MOBILE_SMALL         MonitorDeviceID = "mobile_small"
	MONITORDEVICEID_CHROME_LAPTOP_LARGE  MonitorDeviceID = "chrome.laptop_large"
	MONITORDEVICEID_CHROME_TABLET        MonitorDeviceID = "chrome.tablet"
	MONITORDEVICEID_CHROME_MOBILE_SMALL  MonitorDeviceID = "chrome.mobile_small"
	MONITORDEVICEID_FIREFOX_LAPTOP_LARGE MonitorDeviceID = "firefox.laptop_large"
	MONITORDEVICEID_FIREFOX_TABLET       MonitorDeviceID = "firefox.tablet"
	MONITORDEVICEID_FIREFOX_MOBILE_SMALL MonitorDeviceID = "firefox.mobile_small"
)

func (v *MonitorDeviceID) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorDeviceID(value)
	for _, existing := range []MonitorDeviceID{"laptop_large", "tablet", "mobile_small", "chrome.laptop_large", "chrome.tablet", "chrome.mobile_small", "firefox.laptop_large", "firefox.tablet", "firefox.mobile_small"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorDeviceID", value)
}

// Ptr returns reference to MonitorDeviceID value
func (v MonitorDeviceID) Ptr() *MonitorDeviceID {
	return &v
}

type NullableMonitorDeviceID struct {
	value *MonitorDeviceID
	isSet bool
}

func (v NullableMonitorDeviceID) Get() *MonitorDeviceID {
	return v.value
}

func (v *NullableMonitorDeviceID) Set(val *MonitorDeviceID) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorDeviceID) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorDeviceID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorDeviceID(val *MonitorDeviceID) *NullableMonitorDeviceID {
	return &NullableMonitorDeviceID{value: val, isSet: true}
}

func (v NullableMonitorDeviceID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorDeviceID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
