/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsGlobalVariableValue Value of the global variable.
type SyntheticsGlobalVariableValue struct {
	// Determines if the variable is secure.
	Secure *bool `json:"secure,omitempty"`
	// Value of the global variable. When reading a global variable, the value will not be present if the variable is secure.
	Value string `json:"value"`
}

// NewSyntheticsGlobalVariableValue instantiates a new SyntheticsGlobalVariableValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsGlobalVariableValue(value string) *SyntheticsGlobalVariableValue {
	this := SyntheticsGlobalVariableValue{}
	this.Value = value
	return &this
}

// NewSyntheticsGlobalVariableValueWithDefaults instantiates a new SyntheticsGlobalVariableValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsGlobalVariableValueWithDefaults() *SyntheticsGlobalVariableValue {
	this := SyntheticsGlobalVariableValue{}
	return &this
}

// GetSecure returns the Secure field value if set, zero value otherwise.
func (o *SyntheticsGlobalVariableValue) GetSecure() bool {
	if o == nil || o.Secure == nil {
		var ret bool
		return ret
	}
	return *o.Secure
}

// GetSecureOk returns a tuple with the Secure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsGlobalVariableValue) GetSecureOk() (*bool, bool) {
	if o == nil || o.Secure == nil {
		return nil, false
	}
	return o.Secure, true
}

// HasSecure returns a boolean if a field has been set.
func (o *SyntheticsGlobalVariableValue) HasSecure() bool {
	if o != nil && o.Secure != nil {
		return true
	}

	return false
}

// SetSecure gets a reference to the given bool and assigns it to the Secure field.
func (o *SyntheticsGlobalVariableValue) SetSecure(v bool) {
	o.Secure = &v
}

// GetValue returns the Value field value
func (o *SyntheticsGlobalVariableValue) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SyntheticsGlobalVariableValue) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SyntheticsGlobalVariableValue) SetValue(v string) {
	o.Value = v
}

func (o SyntheticsGlobalVariableValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secure != nil {
		toSerialize["secure"] = o.Secure
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsGlobalVariableValue struct {
	value *SyntheticsGlobalVariableValue
	isSet bool
}

func (v NullableSyntheticsGlobalVariableValue) Get() *SyntheticsGlobalVariableValue {
	return v.value
}

func (v *NullableSyntheticsGlobalVariableValue) Set(val *SyntheticsGlobalVariableValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsGlobalVariableValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsGlobalVariableValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsGlobalVariableValue(val *SyntheticsGlobalVariableValue) *NullableSyntheticsGlobalVariableValue {
	return &NullableSyntheticsGlobalVariableValue{value: val, isSet: true}
}

func (v NullableSyntheticsGlobalVariableValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsGlobalVariableValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
