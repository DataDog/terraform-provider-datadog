/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsCITestBody Object describing the synthetics tests to trigger.
type SyntheticsCITestBody struct {
	// Individual synthetics test.
	Tests *[]SyntheticsCITest `json:"tests,omitempty"`
}

// NewSyntheticsCITestBody instantiates a new SyntheticsCITestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsCITestBody() *SyntheticsCITestBody {
	this := SyntheticsCITestBody{}
	return &this
}

// NewSyntheticsCITestBodyWithDefaults instantiates a new SyntheticsCITestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsCITestBodyWithDefaults() *SyntheticsCITestBody {
	this := SyntheticsCITestBody{}
	return &this
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *SyntheticsCITestBody) GetTests() []SyntheticsCITest {
	if o == nil || o.Tests == nil {
		var ret []SyntheticsCITest
		return ret
	}
	return *o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsCITestBody) GetTestsOk() (*[]SyntheticsCITest, bool) {
	if o == nil || o.Tests == nil {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *SyntheticsCITestBody) HasTests() bool {
	if o != nil && o.Tests != nil {
		return true
	}

	return false
}

// SetTests gets a reference to the given []SyntheticsCITest and assigns it to the Tests field.
func (o *SyntheticsCITestBody) SetTests(v []SyntheticsCITest) {
	o.Tests = &v
}

func (o SyntheticsCITestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tests != nil {
		toSerialize["tests"] = o.Tests
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsCITestBody struct {
	value *SyntheticsCITestBody
	isSet bool
}

func (v NullableSyntheticsCITestBody) Get() *SyntheticsCITestBody {
	return v.value
}

func (v *NullableSyntheticsCITestBody) Set(val *SyntheticsCITestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsCITestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsCITestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsCITestBody(val *SyntheticsCITestBody) *NullableSyntheticsCITestBody {
	return &NullableSyntheticsCITestBody{value: val, isSet: true}
}

func (v NullableSyntheticsCITestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsCITestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
