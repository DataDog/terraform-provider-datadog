/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// NoteWidgetDefinition The notes and links widget is similar to free text widget, but allows for more formatting options.
type NoteWidgetDefinition struct {
	// Background color of the note.
	BackgroundColor *string `json:"background_color,omitempty"`
	// Content of the note.
	Content string `json:"content"`
	// Size of the text.
	FontSize *string `json:"font_size,omitempty"`
	// Whether to show a tick or not.
	ShowTick  *bool            `json:"show_tick,omitempty"`
	TextAlign *WidgetTextAlign `json:"text_align,omitempty"`
	TickEdge  *WidgetTickEdge  `json:"tick_edge,omitempty"`
	// Where to position the tick on an edge.
	TickPos *string                  `json:"tick_pos,omitempty"`
	Type    NoteWidgetDefinitionType `json:"type"`
}

// NewNoteWidgetDefinition instantiates a new NoteWidgetDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteWidgetDefinition(content string, type_ NoteWidgetDefinitionType) *NoteWidgetDefinition {
	this := NoteWidgetDefinition{}
	this.Content = content
	this.Type = type_
	return &this
}

// NewNoteWidgetDefinitionWithDefaults instantiates a new NoteWidgetDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWidgetDefinitionWithDefaults() *NoteWidgetDefinition {
	this := NoteWidgetDefinition{}
	var type_ NoteWidgetDefinitionType = "note"
	this.Type = type_
	return &this
}

// GetBackgroundColor returns the BackgroundColor field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetBackgroundColor() string {
	if o == nil || o.BackgroundColor == nil {
		var ret string
		return ret
	}
	return *o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetBackgroundColorOk() (*string, bool) {
	if o == nil || o.BackgroundColor == nil {
		return nil, false
	}
	return o.BackgroundColor, true
}

// HasBackgroundColor returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasBackgroundColor() bool {
	if o != nil && o.BackgroundColor != nil {
		return true
	}

	return false
}

// SetBackgroundColor gets a reference to the given string and assigns it to the BackgroundColor field.
func (o *NoteWidgetDefinition) SetBackgroundColor(v string) {
	o.BackgroundColor = &v
}

// GetContent returns the Content field value
func (o *NoteWidgetDefinition) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *NoteWidgetDefinition) SetContent(v string) {
	o.Content = v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetFontSize() string {
	if o == nil || o.FontSize == nil {
		var ret string
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetFontSizeOk() (*string, bool) {
	if o == nil || o.FontSize == nil {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasFontSize() bool {
	if o != nil && o.FontSize != nil {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given string and assigns it to the FontSize field.
func (o *NoteWidgetDefinition) SetFontSize(v string) {
	o.FontSize = &v
}

// GetShowTick returns the ShowTick field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetShowTick() bool {
	if o == nil || o.ShowTick == nil {
		var ret bool
		return ret
	}
	return *o.ShowTick
}

// GetShowTickOk returns a tuple with the ShowTick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetShowTickOk() (*bool, bool) {
	if o == nil || o.ShowTick == nil {
		return nil, false
	}
	return o.ShowTick, true
}

// HasShowTick returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasShowTick() bool {
	if o != nil && o.ShowTick != nil {
		return true
	}

	return false
}

// SetShowTick gets a reference to the given bool and assigns it to the ShowTick field.
func (o *NoteWidgetDefinition) SetShowTick(v bool) {
	o.ShowTick = &v
}

// GetTextAlign returns the TextAlign field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetTextAlign() WidgetTextAlign {
	if o == nil || o.TextAlign == nil {
		var ret WidgetTextAlign
		return ret
	}
	return *o.TextAlign
}

// GetTextAlignOk returns a tuple with the TextAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetTextAlignOk() (*WidgetTextAlign, bool) {
	if o == nil || o.TextAlign == nil {
		return nil, false
	}
	return o.TextAlign, true
}

// HasTextAlign returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasTextAlign() bool {
	if o != nil && o.TextAlign != nil {
		return true
	}

	return false
}

// SetTextAlign gets a reference to the given WidgetTextAlign and assigns it to the TextAlign field.
func (o *NoteWidgetDefinition) SetTextAlign(v WidgetTextAlign) {
	o.TextAlign = &v
}

// GetTickEdge returns the TickEdge field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetTickEdge() WidgetTickEdge {
	if o == nil || o.TickEdge == nil {
		var ret WidgetTickEdge
		return ret
	}
	return *o.TickEdge
}

// GetTickEdgeOk returns a tuple with the TickEdge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetTickEdgeOk() (*WidgetTickEdge, bool) {
	if o == nil || o.TickEdge == nil {
		return nil, false
	}
	return o.TickEdge, true
}

// HasTickEdge returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasTickEdge() bool {
	if o != nil && o.TickEdge != nil {
		return true
	}

	return false
}

// SetTickEdge gets a reference to the given WidgetTickEdge and assigns it to the TickEdge field.
func (o *NoteWidgetDefinition) SetTickEdge(v WidgetTickEdge) {
	o.TickEdge = &v
}

// GetTickPos returns the TickPos field value if set, zero value otherwise.
func (o *NoteWidgetDefinition) GetTickPos() string {
	if o == nil || o.TickPos == nil {
		var ret string
		return ret
	}
	return *o.TickPos
}

// GetTickPosOk returns a tuple with the TickPos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetTickPosOk() (*string, bool) {
	if o == nil || o.TickPos == nil {
		return nil, false
	}
	return o.TickPos, true
}

// HasTickPos returns a boolean if a field has been set.
func (o *NoteWidgetDefinition) HasTickPos() bool {
	if o != nil && o.TickPos != nil {
		return true
	}

	return false
}

// SetTickPos gets a reference to the given string and assigns it to the TickPos field.
func (o *NoteWidgetDefinition) SetTickPos(v string) {
	o.TickPos = &v
}

// GetType returns the Type field value
func (o *NoteWidgetDefinition) GetType() NoteWidgetDefinitionType {
	if o == nil {
		var ret NoteWidgetDefinitionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NoteWidgetDefinition) GetTypeOk() (*NoteWidgetDefinitionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NoteWidgetDefinition) SetType(v NoteWidgetDefinitionType) {
	o.Type = v
}

func (o NoteWidgetDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackgroundColor != nil {
		toSerialize["background_color"] = o.BackgroundColor
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.FontSize != nil {
		toSerialize["font_size"] = o.FontSize
	}
	if o.ShowTick != nil {
		toSerialize["show_tick"] = o.ShowTick
	}
	if o.TextAlign != nil {
		toSerialize["text_align"] = o.TextAlign
	}
	if o.TickEdge != nil {
		toSerialize["tick_edge"] = o.TickEdge
	}
	if o.TickPos != nil {
		toSerialize["tick_pos"] = o.TickPos
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNoteWidgetDefinition struct {
	value *NoteWidgetDefinition
	isSet bool
}

func (v NullableNoteWidgetDefinition) Get() *NoteWidgetDefinition {
	return v.value
}

func (v *NullableNoteWidgetDefinition) Set(val *NoteWidgetDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteWidgetDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteWidgetDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteWidgetDefinition(val *NoteWidgetDefinition) *NullableNoteWidgetDefinition {
	return &NullableNoteWidgetDefinition{value: val, isSet: true}
}

func (v NullableNoteWidgetDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteWidgetDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
