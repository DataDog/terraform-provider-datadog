/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// AccessRole The access role of the user. Options are **st** (standard user), **adm** (admin user), or **ro** (read-only user).
type AccessRole string

// List of AccessRole
const (
	ACCESSROLE_STANDARD  AccessRole = "st"
	ACCESSROLE_ADMIN     AccessRole = "adm"
	ACCESSROLE_READ_ONLY AccessRole = "ro"
	ACCESSROLE_ERROR     AccessRole = "ERROR"
)

func (v *AccessRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessRole(value)
	for _, existing := range []AccessRole{"st", "adm", "ro", "ERROR"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessRole", value)
}

// Ptr returns reference to AccessRole value
func (v AccessRole) Ptr() *AccessRole {
	return &v
}

type NullableAccessRole struct {
	value *AccessRole
	isSet bool
}

func (v NullableAccessRole) Get() *AccessRole {
	return v.value
}

func (v *NullableAccessRole) Set(val *AccessRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRole(val *AccessRole) *NullableAccessRole {
	return &NullableAccessRole{value: val, isSet: true}
}

func (v NullableAccessRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
