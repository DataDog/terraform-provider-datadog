/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SLOBulkDeleteResponse The bulk partial delete service level objective object endpoint response.  This endpoint operates on multiple service level objective objects, so it may be partially successful. In such cases, the \"data\" and \"error\" fields in this response indicate which deletions succeeded and failed.
type SLOBulkDeleteResponse struct {
	Data *SLOBulkDeleteResponseData `json:"data,omitempty"`
	// Array of errors object returned.
	Errors *[]SLOBulkDeleteResponseErrors `json:"errors,omitempty"`
}

// NewSLOBulkDeleteResponse instantiates a new SLOBulkDeleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLOBulkDeleteResponse() *SLOBulkDeleteResponse {
	this := SLOBulkDeleteResponse{}
	return &this
}

// NewSLOBulkDeleteResponseWithDefaults instantiates a new SLOBulkDeleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOBulkDeleteResponseWithDefaults() *SLOBulkDeleteResponse {
	this := SLOBulkDeleteResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SLOBulkDeleteResponse) GetData() SLOBulkDeleteResponseData {
	if o == nil || o.Data == nil {
		var ret SLOBulkDeleteResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOBulkDeleteResponse) GetDataOk() (*SLOBulkDeleteResponseData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SLOBulkDeleteResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given SLOBulkDeleteResponseData and assigns it to the Data field.
func (o *SLOBulkDeleteResponse) SetData(v SLOBulkDeleteResponseData) {
	o.Data = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *SLOBulkDeleteResponse) GetErrors() []SLOBulkDeleteResponseErrors {
	if o == nil || o.Errors == nil {
		var ret []SLOBulkDeleteResponseErrors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLOBulkDeleteResponse) GetErrorsOk() (*[]SLOBulkDeleteResponseErrors, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *SLOBulkDeleteResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []SLOBulkDeleteResponseErrors and assigns it to the Errors field.
func (o *SLOBulkDeleteResponse) SetErrors(v []SLOBulkDeleteResponseErrors) {
	o.Errors = &v
}

func (o SLOBulkDeleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableSLOBulkDeleteResponse struct {
	value *SLOBulkDeleteResponse
	isSet bool
}

func (v NullableSLOBulkDeleteResponse) Get() *SLOBulkDeleteResponse {
	return v.value
}

func (v *NullableSLOBulkDeleteResponse) Set(val *SLOBulkDeleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSLOBulkDeleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSLOBulkDeleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLOBulkDeleteResponse(val *SLOBulkDeleteResponse) *NullableSLOBulkDeleteResponse {
	return &NullableSLOBulkDeleteResponse{value: val, isSet: true}
}

func (v NullableSLOBulkDeleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLOBulkDeleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
