/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// WidgetFieldSort Which column and order to sort by
type WidgetFieldSort struct {
	// Facet path for the column
	Column string     `json:"column"`
	Order  WidgetSort `json:"order"`
}

// NewWidgetFieldSort instantiates a new WidgetFieldSort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetFieldSort(column string, order WidgetSort) *WidgetFieldSort {
	this := WidgetFieldSort{}
	this.Column = column
	this.Order = order
	return &this
}

// NewWidgetFieldSortWithDefaults instantiates a new WidgetFieldSort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetFieldSortWithDefaults() *WidgetFieldSort {
	this := WidgetFieldSort{}
	return &this
}

// GetColumn returns the Column field value
func (o *WidgetFieldSort) GetColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *WidgetFieldSort) GetColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *WidgetFieldSort) SetColumn(v string) {
	o.Column = v
}

// GetOrder returns the Order field value
func (o *WidgetFieldSort) GetOrder() WidgetSort {
	if o == nil {
		var ret WidgetSort
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *WidgetFieldSort) GetOrderOk() (*WidgetSort, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *WidgetFieldSort) SetOrder(v WidgetSort) {
	o.Order = v
}

func (o WidgetFieldSort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["column"] = o.Column
	}
	if true {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableWidgetFieldSort struct {
	value *WidgetFieldSort
	isSet bool
}

func (v NullableWidgetFieldSort) Get() *WidgetFieldSort {
	return v.value
}

func (v *NullableWidgetFieldSort) Set(val *WidgetFieldSort) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetFieldSort) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetFieldSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetFieldSort(val *WidgetFieldSort) *NullableWidgetFieldSort {
	return &NullableWidgetFieldSort{value: val, isSet: true}
}

func (v NullableWidgetFieldSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetFieldSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
