/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// CheckCanDeleteSLOResponseData An array of service level objective objects.
type CheckCanDeleteSLOResponseData struct {
	// An array of of SLO IDs that can be safely deleted.
	Ok *[]string `json:"ok,omitempty"`
}

// NewCheckCanDeleteSLOResponseData instantiates a new CheckCanDeleteSLOResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCanDeleteSLOResponseData() *CheckCanDeleteSLOResponseData {
	this := CheckCanDeleteSLOResponseData{}
	return &this
}

// NewCheckCanDeleteSLOResponseDataWithDefaults instantiates a new CheckCanDeleteSLOResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCanDeleteSLOResponseDataWithDefaults() *CheckCanDeleteSLOResponseData {
	this := CheckCanDeleteSLOResponseData{}
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *CheckCanDeleteSLOResponseData) GetOk() []string {
	if o == nil || o.Ok == nil {
		var ret []string
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCanDeleteSLOResponseData) GetOkOk() (*[]string, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *CheckCanDeleteSLOResponseData) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given []string and assigns it to the Ok field.
func (o *CheckCanDeleteSLOResponseData) SetOk(v []string) {
	o.Ok = &v
}

func (o CheckCanDeleteSLOResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableCheckCanDeleteSLOResponseData struct {
	value *CheckCanDeleteSLOResponseData
	isSet bool
}

func (v NullableCheckCanDeleteSLOResponseData) Get() *CheckCanDeleteSLOResponseData {
	return v.value
}

func (v *NullableCheckCanDeleteSLOResponseData) Set(val *CheckCanDeleteSLOResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCanDeleteSLOResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCanDeleteSLOResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCanDeleteSLOResponseData(val *CheckCanDeleteSLOResponseData) *NullableCheckCanDeleteSLOResponseData {
	return &NullableCheckCanDeleteSLOResponseData{value: val, isSet: true}
}

func (v NullableCheckCanDeleteSLOResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCanDeleteSLOResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
