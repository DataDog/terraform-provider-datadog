/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// MonitorState Wrapper object with the different monitor states.
type MonitorState struct {
	// Dictionary where the keys are groups (comma separated lists of tags) and the values are the list of groups your monitor is broken down on.
	Groups *map[string]MonitorStateGroup `json:"groups,omitempty"`
}

// NewMonitorState instantiates a new MonitorState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorState() *MonitorState {
	this := MonitorState{}
	return &this
}

// NewMonitorStateWithDefaults instantiates a new MonitorState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorStateWithDefaults() *MonitorState {
	this := MonitorState{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *MonitorState) GetGroups() map[string]MonitorStateGroup {
	if o == nil || o.Groups == nil {
		var ret map[string]MonitorStateGroup
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorState) GetGroupsOk() (*map[string]MonitorStateGroup, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *MonitorState) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given map[string]MonitorStateGroup and assigns it to the Groups field.
func (o *MonitorState) SetGroups(v map[string]MonitorStateGroup) {
	o.Groups = &v
}

func (o MonitorState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorState struct {
	value *MonitorState
	isSet bool
}

func (v NullableMonitorState) Get() *MonitorState {
	return v.value
}

func (v *NullableMonitorState) Set(val *MonitorState) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorState) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorState(val *MonitorState) *NullableMonitorState {
	return &NullableMonitorState{value: val, isSet: true}
}

func (v NullableMonitorState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
