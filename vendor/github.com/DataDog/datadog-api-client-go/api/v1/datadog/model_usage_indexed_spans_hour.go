/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageIndexedSpansHour The hours of indexed spans usage.
type UsageIndexedSpansHour struct {
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
	// Contains the number of spans indexed.
	IndexedEventsCount *int64 `json:"indexed_events_count,omitempty"`
}

// NewUsageIndexedSpansHour instantiates a new UsageIndexedSpansHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageIndexedSpansHour() *UsageIndexedSpansHour {
	this := UsageIndexedSpansHour{}
	return &this
}

// NewUsageIndexedSpansHourWithDefaults instantiates a new UsageIndexedSpansHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageIndexedSpansHourWithDefaults() *UsageIndexedSpansHour {
	this := UsageIndexedSpansHour{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageIndexedSpansHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageIndexedSpansHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageIndexedSpansHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageIndexedSpansHour) SetHour(v time.Time) {
	o.Hour = &v
}

// GetIndexedEventsCount returns the IndexedEventsCount field value if set, zero value otherwise.
func (o *UsageIndexedSpansHour) GetIndexedEventsCount() int64 {
	if o == nil || o.IndexedEventsCount == nil {
		var ret int64
		return ret
	}
	return *o.IndexedEventsCount
}

// GetIndexedEventsCountOk returns a tuple with the IndexedEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageIndexedSpansHour) GetIndexedEventsCountOk() (*int64, bool) {
	if o == nil || o.IndexedEventsCount == nil {
		return nil, false
	}
	return o.IndexedEventsCount, true
}

// HasIndexedEventsCount returns a boolean if a field has been set.
func (o *UsageIndexedSpansHour) HasIndexedEventsCount() bool {
	if o != nil && o.IndexedEventsCount != nil {
		return true
	}

	return false
}

// SetIndexedEventsCount gets a reference to the given int64 and assigns it to the IndexedEventsCount field.
func (o *UsageIndexedSpansHour) SetIndexedEventsCount(v int64) {
	o.IndexedEventsCount = &v
}

func (o UsageIndexedSpansHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.IndexedEventsCount != nil {
		toSerialize["indexed_events_count"] = o.IndexedEventsCount
	}
	return json.Marshal(toSerialize)
}

type NullableUsageIndexedSpansHour struct {
	value *UsageIndexedSpansHour
	isSet bool
}

func (v NullableUsageIndexedSpansHour) Get() *UsageIndexedSpansHour {
	return v.value
}

func (v *NullableUsageIndexedSpansHour) Set(val *UsageIndexedSpansHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageIndexedSpansHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageIndexedSpansHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageIndexedSpansHour(val *UsageIndexedSpansHour) *NullableUsageIndexedSpansHour {
	return &NullableUsageIndexedSpansHour{value: val, isSet: true}
}

func (v NullableUsageIndexedSpansHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageIndexedSpansHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
