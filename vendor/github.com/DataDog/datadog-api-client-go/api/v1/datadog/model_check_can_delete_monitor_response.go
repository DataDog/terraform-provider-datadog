/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// CheckCanDeleteMonitorResponse Response of monitor IDs that can or can't be safely deleted.
type CheckCanDeleteMonitorResponse struct {
	Data CheckCanDeleteMonitorResponseData `json:"data"`
	// A mapping of Monitor ID to strings denoting where it's used.
	Errors *map[string][]string `json:"errors,omitempty"`
}

// NewCheckCanDeleteMonitorResponse instantiates a new CheckCanDeleteMonitorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCanDeleteMonitorResponse(data CheckCanDeleteMonitorResponseData) *CheckCanDeleteMonitorResponse {
	this := CheckCanDeleteMonitorResponse{}
	this.Data = data
	return &this
}

// NewCheckCanDeleteMonitorResponseWithDefaults instantiates a new CheckCanDeleteMonitorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCanDeleteMonitorResponseWithDefaults() *CheckCanDeleteMonitorResponse {
	this := CheckCanDeleteMonitorResponse{}
	return &this
}

// GetData returns the Data field value
func (o *CheckCanDeleteMonitorResponse) GetData() CheckCanDeleteMonitorResponseData {
	if o == nil {
		var ret CheckCanDeleteMonitorResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CheckCanDeleteMonitorResponse) GetDataOk() (*CheckCanDeleteMonitorResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CheckCanDeleteMonitorResponse) SetData(v CheckCanDeleteMonitorResponseData) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CheckCanDeleteMonitorResponse) GetErrors() map[string][]string {
	if o == nil || o.Errors == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCanDeleteMonitorResponse) GetErrorsOk() (*map[string][]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CheckCanDeleteMonitorResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string][]string and assigns it to the Errors field.
func (o *CheckCanDeleteMonitorResponse) SetErrors(v map[string][]string) {
	o.Errors = &v
}

func (o CheckCanDeleteMonitorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableCheckCanDeleteMonitorResponse struct {
	value *CheckCanDeleteMonitorResponse
	isSet bool
}

func (v NullableCheckCanDeleteMonitorResponse) Get() *CheckCanDeleteMonitorResponse {
	return v.value
}

func (v *NullableCheckCanDeleteMonitorResponse) Set(val *CheckCanDeleteMonitorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCanDeleteMonitorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCanDeleteMonitorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCanDeleteMonitorResponse(val *CheckCanDeleteMonitorResponse) *NullableCheckCanDeleteMonitorResponse {
	return &NullableCheckCanDeleteMonitorResponse{value: val, isSet: true}
}

func (v NullableCheckCanDeleteMonitorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCanDeleteMonitorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
