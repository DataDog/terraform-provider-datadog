/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// SyntheticsGlobalVariableParseTestOptionsParser Details of the parser to use for the global variable.
type SyntheticsGlobalVariableParseTestOptionsParser struct {
	Type SyntheticsGlobalVariableParserType `json:"type"`
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `json:"value,omitempty"`
}

// NewSyntheticsGlobalVariableParseTestOptionsParser instantiates a new SyntheticsGlobalVariableParseTestOptionsParser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticsGlobalVariableParseTestOptionsParser(type_ SyntheticsGlobalVariableParserType) *SyntheticsGlobalVariableParseTestOptionsParser {
	this := SyntheticsGlobalVariableParseTestOptionsParser{}
	this.Type = type_
	return &this
}

// NewSyntheticsGlobalVariableParseTestOptionsParserWithDefaults instantiates a new SyntheticsGlobalVariableParseTestOptionsParser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticsGlobalVariableParseTestOptionsParserWithDefaults() *SyntheticsGlobalVariableParseTestOptionsParser {
	this := SyntheticsGlobalVariableParseTestOptionsParser{}
	return &this
}

// GetType returns the Type field value
func (o *SyntheticsGlobalVariableParseTestOptionsParser) GetType() SyntheticsGlobalVariableParserType {
	if o == nil {
		var ret SyntheticsGlobalVariableParserType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SyntheticsGlobalVariableParseTestOptionsParser) GetTypeOk() (*SyntheticsGlobalVariableParserType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SyntheticsGlobalVariableParseTestOptionsParser) SetType(v SyntheticsGlobalVariableParserType) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SyntheticsGlobalVariableParseTestOptionsParser) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticsGlobalVariableParseTestOptionsParser) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SyntheticsGlobalVariableParseTestOptionsParser) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SyntheticsGlobalVariableParseTestOptionsParser) SetValue(v string) {
	o.Value = &v
}

func (o SyntheticsGlobalVariableParseTestOptionsParser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticsGlobalVariableParseTestOptionsParser struct {
	value *SyntheticsGlobalVariableParseTestOptionsParser
	isSet bool
}

func (v NullableSyntheticsGlobalVariableParseTestOptionsParser) Get() *SyntheticsGlobalVariableParseTestOptionsParser {
	return v.value
}

func (v *NullableSyntheticsGlobalVariableParseTestOptionsParser) Set(val *SyntheticsGlobalVariableParseTestOptionsParser) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticsGlobalVariableParseTestOptionsParser) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticsGlobalVariableParseTestOptionsParser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticsGlobalVariableParseTestOptionsParser(val *SyntheticsGlobalVariableParseTestOptionsParser) *NullableSyntheticsGlobalVariableParseTestOptionsParser {
	return &NullableSyntheticsGlobalVariableParseTestOptionsParser{value: val, isSet: true}
}

func (v NullableSyntheticsGlobalVariableParseTestOptionsParser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticsGlobalVariableParseTestOptionsParser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
