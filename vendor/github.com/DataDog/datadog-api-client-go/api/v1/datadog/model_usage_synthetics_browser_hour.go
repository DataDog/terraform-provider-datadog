/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"time"
)

// UsageSyntheticsBrowserHour Number of Synthetics Browser tests run for each hour for a given organization.
type UsageSyntheticsBrowserHour struct {
	// Contains the number of Synthetics Browser tests run.
	BrowserCheckCallsCount *int64 `json:"browser_check_calls_count,omitempty"`
	// The hour for the usage.
	Hour *time.Time `json:"hour,omitempty"`
}

// NewUsageSyntheticsBrowserHour instantiates a new UsageSyntheticsBrowserHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageSyntheticsBrowserHour() *UsageSyntheticsBrowserHour {
	this := UsageSyntheticsBrowserHour{}
	return &this
}

// NewUsageSyntheticsBrowserHourWithDefaults instantiates a new UsageSyntheticsBrowserHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageSyntheticsBrowserHourWithDefaults() *UsageSyntheticsBrowserHour {
	this := UsageSyntheticsBrowserHour{}
	return &this
}

// GetBrowserCheckCallsCount returns the BrowserCheckCallsCount field value if set, zero value otherwise.
func (o *UsageSyntheticsBrowserHour) GetBrowserCheckCallsCount() int64 {
	if o == nil || o.BrowserCheckCallsCount == nil {
		var ret int64
		return ret
	}
	return *o.BrowserCheckCallsCount
}

// GetBrowserCheckCallsCountOk returns a tuple with the BrowserCheckCallsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageSyntheticsBrowserHour) GetBrowserCheckCallsCountOk() (*int64, bool) {
	if o == nil || o.BrowserCheckCallsCount == nil {
		return nil, false
	}
	return o.BrowserCheckCallsCount, true
}

// HasBrowserCheckCallsCount returns a boolean if a field has been set.
func (o *UsageSyntheticsBrowserHour) HasBrowserCheckCallsCount() bool {
	if o != nil && o.BrowserCheckCallsCount != nil {
		return true
	}

	return false
}

// SetBrowserCheckCallsCount gets a reference to the given int64 and assigns it to the BrowserCheckCallsCount field.
func (o *UsageSyntheticsBrowserHour) SetBrowserCheckCallsCount(v int64) {
	o.BrowserCheckCallsCount = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *UsageSyntheticsBrowserHour) GetHour() time.Time {
	if o == nil || o.Hour == nil {
		var ret time.Time
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageSyntheticsBrowserHour) GetHourOk() (*time.Time, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *UsageSyntheticsBrowserHour) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given time.Time and assigns it to the Hour field.
func (o *UsageSyntheticsBrowserHour) SetHour(v time.Time) {
	o.Hour = &v
}

func (o UsageSyntheticsBrowserHour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BrowserCheckCallsCount != nil {
		toSerialize["browser_check_calls_count"] = o.BrowserCheckCallsCount
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	return json.Marshal(toSerialize)
}

type NullableUsageSyntheticsBrowserHour struct {
	value *UsageSyntheticsBrowserHour
	isSet bool
}

func (v NullableUsageSyntheticsBrowserHour) Get() *UsageSyntheticsBrowserHour {
	return v.value
}

func (v *NullableUsageSyntheticsBrowserHour) Set(val *UsageSyntheticsBrowserHour) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageSyntheticsBrowserHour) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageSyntheticsBrowserHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageSyntheticsBrowserHour(val *UsageSyntheticsBrowserHour) *NullableUsageSyntheticsBrowserHour {
	return &NullableUsageSyntheticsBrowserHour{value: val, isSet: true}
}

func (v NullableUsageSyntheticsBrowserHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageSyntheticsBrowserHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
