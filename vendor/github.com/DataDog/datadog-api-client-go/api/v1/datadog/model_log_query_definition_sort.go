/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogQueryDefinitionSort Define a sorting method.
type LogQueryDefinitionSort struct {
	// The aggregation method.
	Aggregation string `json:"aggregation"`
	// Facet name.
	Facet *string    `json:"facet,omitempty"`
	Order WidgetSort `json:"order"`
}

// NewLogQueryDefinitionSort instantiates a new LogQueryDefinitionSort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogQueryDefinitionSort(aggregation string, order WidgetSort) *LogQueryDefinitionSort {
	this := LogQueryDefinitionSort{}
	this.Aggregation = aggregation
	this.Order = order
	return &this
}

// NewLogQueryDefinitionSortWithDefaults instantiates a new LogQueryDefinitionSort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogQueryDefinitionSortWithDefaults() *LogQueryDefinitionSort {
	this := LogQueryDefinitionSort{}
	return &this
}

// GetAggregation returns the Aggregation field value
func (o *LogQueryDefinitionSort) GetAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *LogQueryDefinitionSort) GetAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *LogQueryDefinitionSort) SetAggregation(v string) {
	o.Aggregation = v
}

// GetFacet returns the Facet field value if set, zero value otherwise.
func (o *LogQueryDefinitionSort) GetFacet() string {
	if o == nil || o.Facet == nil {
		var ret string
		return ret
	}
	return *o.Facet
}

// GetFacetOk returns a tuple with the Facet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogQueryDefinitionSort) GetFacetOk() (*string, bool) {
	if o == nil || o.Facet == nil {
		return nil, false
	}
	return o.Facet, true
}

// HasFacet returns a boolean if a field has been set.
func (o *LogQueryDefinitionSort) HasFacet() bool {
	if o != nil && o.Facet != nil {
		return true
	}

	return false
}

// SetFacet gets a reference to the given string and assigns it to the Facet field.
func (o *LogQueryDefinitionSort) SetFacet(v string) {
	o.Facet = &v
}

// GetOrder returns the Order field value
func (o *LogQueryDefinitionSort) GetOrder() WidgetSort {
	if o == nil {
		var ret WidgetSort
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *LogQueryDefinitionSort) GetOrderOk() (*WidgetSort, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *LogQueryDefinitionSort) SetOrder(v WidgetSort) {
	o.Order = v
}

func (o LogQueryDefinitionSort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.Facet != nil {
		toSerialize["facet"] = o.Facet
	}
	if true {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableLogQueryDefinitionSort struct {
	value *LogQueryDefinitionSort
	isSet bool
}

func (v NullableLogQueryDefinitionSort) Get() *LogQueryDefinitionSort {
	return v.value
}

func (v *NullableLogQueryDefinitionSort) Set(val *LogQueryDefinitionSort) {
	v.value = val
	v.isSet = true
}

func (v NullableLogQueryDefinitionSort) IsSet() bool {
	return v.isSet
}

func (v *NullableLogQueryDefinitionSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogQueryDefinitionSort(val *LogQueryDefinitionSort) *NullableLogQueryDefinitionSort {
	return &NullableLogQueryDefinitionSort{value: val, isSet: true}
}

func (v NullableLogQueryDefinitionSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogQueryDefinitionSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
