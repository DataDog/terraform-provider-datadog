/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UsageBillableSummaryKeys Response with aggregated usage types.
type UsageBillableSummaryKeys struct {
	ApmHostSum                 *UsageBillableSummaryBody `json:"apm_host_sum,omitempty"`
	ApmHostTop99p              *UsageBillableSummaryBody `json:"apm_host_top99p,omitempty"`
	ApmTraceSearchSum          *UsageBillableSummaryBody `json:"apm_trace_search_sum,omitempty"`
	FargateContainerAverage    *UsageBillableSummaryBody `json:"fargate_container_average,omitempty"`
	InfraContainerSum          *UsageBillableSummaryBody `json:"infra_container_sum,omitempty"`
	InfraHostSum               *UsageBillableSummaryBody `json:"infra_host_sum,omitempty"`
	InfraHostTop99p            *UsageBillableSummaryBody `json:"infra_host_top99p,omitempty"`
	IotTop99p                  *UsageBillableSummaryBody `json:"iot_top99p,omitempty"`
	LambdaFunctionAverage      *UsageBillableSummaryBody `json:"lambda_function_average,omitempty"`
	LogsIndexedSum             *UsageBillableSummaryBody `json:"logs_indexed_sum,omitempty"`
	LogsIngestedSum            *UsageBillableSummaryBody `json:"logs_ingested_sum,omitempty"`
	NpmFlowSum                 *UsageBillableSummaryBody `json:"npm_flow_sum,omitempty"`
	NpmHostTop99p              *UsageBillableSummaryBody `json:"npm_host_top99p,omitempty"`
	RumSum                     *UsageBillableSummaryBody `json:"rum_sum,omitempty"`
	SiemSum                    *UsageBillableSummaryBody `json:"siem_sum,omitempty"`
	SyntheticsApiTestsSum      *UsageBillableSummaryBody `json:"synthetics_api_tests_sum,omitempty"`
	SyntheticsBrowserChecksSum *UsageBillableSummaryBody `json:"synthetics_browser_checks_sum,omitempty"`
	TimeseriesAverage          *UsageBillableSummaryBody `json:"timeseries_average,omitempty"`
}

// NewUsageBillableSummaryKeys instantiates a new UsageBillableSummaryKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageBillableSummaryKeys() *UsageBillableSummaryKeys {
	this := UsageBillableSummaryKeys{}
	return &this
}

// NewUsageBillableSummaryKeysWithDefaults instantiates a new UsageBillableSummaryKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageBillableSummaryKeysWithDefaults() *UsageBillableSummaryKeys {
	this := UsageBillableSummaryKeys{}
	return &this
}

// GetApmHostSum returns the ApmHostSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetApmHostSum() UsageBillableSummaryBody {
	if o == nil || o.ApmHostSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.ApmHostSum
}

// GetApmHostSumOk returns a tuple with the ApmHostSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetApmHostSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.ApmHostSum == nil {
		return nil, false
	}
	return o.ApmHostSum, true
}

// HasApmHostSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasApmHostSum() bool {
	if o != nil && o.ApmHostSum != nil {
		return true
	}

	return false
}

// SetApmHostSum gets a reference to the given UsageBillableSummaryBody and assigns it to the ApmHostSum field.
func (o *UsageBillableSummaryKeys) SetApmHostSum(v UsageBillableSummaryBody) {
	o.ApmHostSum = &v
}

// GetApmHostTop99p returns the ApmHostTop99p field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetApmHostTop99p() UsageBillableSummaryBody {
	if o == nil || o.ApmHostTop99p == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.ApmHostTop99p
}

// GetApmHostTop99pOk returns a tuple with the ApmHostTop99p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetApmHostTop99pOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.ApmHostTop99p == nil {
		return nil, false
	}
	return o.ApmHostTop99p, true
}

// HasApmHostTop99p returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasApmHostTop99p() bool {
	if o != nil && o.ApmHostTop99p != nil {
		return true
	}

	return false
}

// SetApmHostTop99p gets a reference to the given UsageBillableSummaryBody and assigns it to the ApmHostTop99p field.
func (o *UsageBillableSummaryKeys) SetApmHostTop99p(v UsageBillableSummaryBody) {
	o.ApmHostTop99p = &v
}

// GetApmTraceSearchSum returns the ApmTraceSearchSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetApmTraceSearchSum() UsageBillableSummaryBody {
	if o == nil || o.ApmTraceSearchSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.ApmTraceSearchSum
}

// GetApmTraceSearchSumOk returns a tuple with the ApmTraceSearchSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetApmTraceSearchSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.ApmTraceSearchSum == nil {
		return nil, false
	}
	return o.ApmTraceSearchSum, true
}

// HasApmTraceSearchSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasApmTraceSearchSum() bool {
	if o != nil && o.ApmTraceSearchSum != nil {
		return true
	}

	return false
}

// SetApmTraceSearchSum gets a reference to the given UsageBillableSummaryBody and assigns it to the ApmTraceSearchSum field.
func (o *UsageBillableSummaryKeys) SetApmTraceSearchSum(v UsageBillableSummaryBody) {
	o.ApmTraceSearchSum = &v
}

// GetFargateContainerAverage returns the FargateContainerAverage field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetFargateContainerAverage() UsageBillableSummaryBody {
	if o == nil || o.FargateContainerAverage == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.FargateContainerAverage
}

// GetFargateContainerAverageOk returns a tuple with the FargateContainerAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetFargateContainerAverageOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.FargateContainerAverage == nil {
		return nil, false
	}
	return o.FargateContainerAverage, true
}

// HasFargateContainerAverage returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasFargateContainerAverage() bool {
	if o != nil && o.FargateContainerAverage != nil {
		return true
	}

	return false
}

// SetFargateContainerAverage gets a reference to the given UsageBillableSummaryBody and assigns it to the FargateContainerAverage field.
func (o *UsageBillableSummaryKeys) SetFargateContainerAverage(v UsageBillableSummaryBody) {
	o.FargateContainerAverage = &v
}

// GetInfraContainerSum returns the InfraContainerSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetInfraContainerSum() UsageBillableSummaryBody {
	if o == nil || o.InfraContainerSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.InfraContainerSum
}

// GetInfraContainerSumOk returns a tuple with the InfraContainerSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetInfraContainerSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.InfraContainerSum == nil {
		return nil, false
	}
	return o.InfraContainerSum, true
}

// HasInfraContainerSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasInfraContainerSum() bool {
	if o != nil && o.InfraContainerSum != nil {
		return true
	}

	return false
}

// SetInfraContainerSum gets a reference to the given UsageBillableSummaryBody and assigns it to the InfraContainerSum field.
func (o *UsageBillableSummaryKeys) SetInfraContainerSum(v UsageBillableSummaryBody) {
	o.InfraContainerSum = &v
}

// GetInfraHostSum returns the InfraHostSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetInfraHostSum() UsageBillableSummaryBody {
	if o == nil || o.InfraHostSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.InfraHostSum
}

// GetInfraHostSumOk returns a tuple with the InfraHostSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetInfraHostSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.InfraHostSum == nil {
		return nil, false
	}
	return o.InfraHostSum, true
}

// HasInfraHostSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasInfraHostSum() bool {
	if o != nil && o.InfraHostSum != nil {
		return true
	}

	return false
}

// SetInfraHostSum gets a reference to the given UsageBillableSummaryBody and assigns it to the InfraHostSum field.
func (o *UsageBillableSummaryKeys) SetInfraHostSum(v UsageBillableSummaryBody) {
	o.InfraHostSum = &v
}

// GetInfraHostTop99p returns the InfraHostTop99p field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetInfraHostTop99p() UsageBillableSummaryBody {
	if o == nil || o.InfraHostTop99p == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.InfraHostTop99p
}

// GetInfraHostTop99pOk returns a tuple with the InfraHostTop99p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetInfraHostTop99pOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.InfraHostTop99p == nil {
		return nil, false
	}
	return o.InfraHostTop99p, true
}

// HasInfraHostTop99p returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasInfraHostTop99p() bool {
	if o != nil && o.InfraHostTop99p != nil {
		return true
	}

	return false
}

// SetInfraHostTop99p gets a reference to the given UsageBillableSummaryBody and assigns it to the InfraHostTop99p field.
func (o *UsageBillableSummaryKeys) SetInfraHostTop99p(v UsageBillableSummaryBody) {
	o.InfraHostTop99p = &v
}

// GetIotTop99p returns the IotTop99p field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetIotTop99p() UsageBillableSummaryBody {
	if o == nil || o.IotTop99p == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.IotTop99p
}

// GetIotTop99pOk returns a tuple with the IotTop99p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetIotTop99pOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.IotTop99p == nil {
		return nil, false
	}
	return o.IotTop99p, true
}

// HasIotTop99p returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasIotTop99p() bool {
	if o != nil && o.IotTop99p != nil {
		return true
	}

	return false
}

// SetIotTop99p gets a reference to the given UsageBillableSummaryBody and assigns it to the IotTop99p field.
func (o *UsageBillableSummaryKeys) SetIotTop99p(v UsageBillableSummaryBody) {
	o.IotTop99p = &v
}

// GetLambdaFunctionAverage returns the LambdaFunctionAverage field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetLambdaFunctionAverage() UsageBillableSummaryBody {
	if o == nil || o.LambdaFunctionAverage == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.LambdaFunctionAverage
}

// GetLambdaFunctionAverageOk returns a tuple with the LambdaFunctionAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetLambdaFunctionAverageOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.LambdaFunctionAverage == nil {
		return nil, false
	}
	return o.LambdaFunctionAverage, true
}

// HasLambdaFunctionAverage returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasLambdaFunctionAverage() bool {
	if o != nil && o.LambdaFunctionAverage != nil {
		return true
	}

	return false
}

// SetLambdaFunctionAverage gets a reference to the given UsageBillableSummaryBody and assigns it to the LambdaFunctionAverage field.
func (o *UsageBillableSummaryKeys) SetLambdaFunctionAverage(v UsageBillableSummaryBody) {
	o.LambdaFunctionAverage = &v
}

// GetLogsIndexedSum returns the LogsIndexedSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetLogsIndexedSum() UsageBillableSummaryBody {
	if o == nil || o.LogsIndexedSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.LogsIndexedSum
}

// GetLogsIndexedSumOk returns a tuple with the LogsIndexedSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetLogsIndexedSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.LogsIndexedSum == nil {
		return nil, false
	}
	return o.LogsIndexedSum, true
}

// HasLogsIndexedSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasLogsIndexedSum() bool {
	if o != nil && o.LogsIndexedSum != nil {
		return true
	}

	return false
}

// SetLogsIndexedSum gets a reference to the given UsageBillableSummaryBody and assigns it to the LogsIndexedSum field.
func (o *UsageBillableSummaryKeys) SetLogsIndexedSum(v UsageBillableSummaryBody) {
	o.LogsIndexedSum = &v
}

// GetLogsIngestedSum returns the LogsIngestedSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetLogsIngestedSum() UsageBillableSummaryBody {
	if o == nil || o.LogsIngestedSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.LogsIngestedSum
}

// GetLogsIngestedSumOk returns a tuple with the LogsIngestedSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetLogsIngestedSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.LogsIngestedSum == nil {
		return nil, false
	}
	return o.LogsIngestedSum, true
}

// HasLogsIngestedSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasLogsIngestedSum() bool {
	if o != nil && o.LogsIngestedSum != nil {
		return true
	}

	return false
}

// SetLogsIngestedSum gets a reference to the given UsageBillableSummaryBody and assigns it to the LogsIngestedSum field.
func (o *UsageBillableSummaryKeys) SetLogsIngestedSum(v UsageBillableSummaryBody) {
	o.LogsIngestedSum = &v
}

// GetNpmFlowSum returns the NpmFlowSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetNpmFlowSum() UsageBillableSummaryBody {
	if o == nil || o.NpmFlowSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.NpmFlowSum
}

// GetNpmFlowSumOk returns a tuple with the NpmFlowSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetNpmFlowSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.NpmFlowSum == nil {
		return nil, false
	}
	return o.NpmFlowSum, true
}

// HasNpmFlowSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasNpmFlowSum() bool {
	if o != nil && o.NpmFlowSum != nil {
		return true
	}

	return false
}

// SetNpmFlowSum gets a reference to the given UsageBillableSummaryBody and assigns it to the NpmFlowSum field.
func (o *UsageBillableSummaryKeys) SetNpmFlowSum(v UsageBillableSummaryBody) {
	o.NpmFlowSum = &v
}

// GetNpmHostTop99p returns the NpmHostTop99p field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetNpmHostTop99p() UsageBillableSummaryBody {
	if o == nil || o.NpmHostTop99p == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.NpmHostTop99p
}

// GetNpmHostTop99pOk returns a tuple with the NpmHostTop99p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetNpmHostTop99pOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.NpmHostTop99p == nil {
		return nil, false
	}
	return o.NpmHostTop99p, true
}

// HasNpmHostTop99p returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasNpmHostTop99p() bool {
	if o != nil && o.NpmHostTop99p != nil {
		return true
	}

	return false
}

// SetNpmHostTop99p gets a reference to the given UsageBillableSummaryBody and assigns it to the NpmHostTop99p field.
func (o *UsageBillableSummaryKeys) SetNpmHostTop99p(v UsageBillableSummaryBody) {
	o.NpmHostTop99p = &v
}

// GetRumSum returns the RumSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetRumSum() UsageBillableSummaryBody {
	if o == nil || o.RumSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.RumSum
}

// GetRumSumOk returns a tuple with the RumSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetRumSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.RumSum == nil {
		return nil, false
	}
	return o.RumSum, true
}

// HasRumSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasRumSum() bool {
	if o != nil && o.RumSum != nil {
		return true
	}

	return false
}

// SetRumSum gets a reference to the given UsageBillableSummaryBody and assigns it to the RumSum field.
func (o *UsageBillableSummaryKeys) SetRumSum(v UsageBillableSummaryBody) {
	o.RumSum = &v
}

// GetSiemSum returns the SiemSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetSiemSum() UsageBillableSummaryBody {
	if o == nil || o.SiemSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.SiemSum
}

// GetSiemSumOk returns a tuple with the SiemSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetSiemSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.SiemSum == nil {
		return nil, false
	}
	return o.SiemSum, true
}

// HasSiemSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasSiemSum() bool {
	if o != nil && o.SiemSum != nil {
		return true
	}

	return false
}

// SetSiemSum gets a reference to the given UsageBillableSummaryBody and assigns it to the SiemSum field.
func (o *UsageBillableSummaryKeys) SetSiemSum(v UsageBillableSummaryBody) {
	o.SiemSum = &v
}

// GetSyntheticsApiTestsSum returns the SyntheticsApiTestsSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetSyntheticsApiTestsSum() UsageBillableSummaryBody {
	if o == nil || o.SyntheticsApiTestsSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.SyntheticsApiTestsSum
}

// GetSyntheticsApiTestsSumOk returns a tuple with the SyntheticsApiTestsSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetSyntheticsApiTestsSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.SyntheticsApiTestsSum == nil {
		return nil, false
	}
	return o.SyntheticsApiTestsSum, true
}

// HasSyntheticsApiTestsSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasSyntheticsApiTestsSum() bool {
	if o != nil && o.SyntheticsApiTestsSum != nil {
		return true
	}

	return false
}

// SetSyntheticsApiTestsSum gets a reference to the given UsageBillableSummaryBody and assigns it to the SyntheticsApiTestsSum field.
func (o *UsageBillableSummaryKeys) SetSyntheticsApiTestsSum(v UsageBillableSummaryBody) {
	o.SyntheticsApiTestsSum = &v
}

// GetSyntheticsBrowserChecksSum returns the SyntheticsBrowserChecksSum field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetSyntheticsBrowserChecksSum() UsageBillableSummaryBody {
	if o == nil || o.SyntheticsBrowserChecksSum == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.SyntheticsBrowserChecksSum
}

// GetSyntheticsBrowserChecksSumOk returns a tuple with the SyntheticsBrowserChecksSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetSyntheticsBrowserChecksSumOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.SyntheticsBrowserChecksSum == nil {
		return nil, false
	}
	return o.SyntheticsBrowserChecksSum, true
}

// HasSyntheticsBrowserChecksSum returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasSyntheticsBrowserChecksSum() bool {
	if o != nil && o.SyntheticsBrowserChecksSum != nil {
		return true
	}

	return false
}

// SetSyntheticsBrowserChecksSum gets a reference to the given UsageBillableSummaryBody and assigns it to the SyntheticsBrowserChecksSum field.
func (o *UsageBillableSummaryKeys) SetSyntheticsBrowserChecksSum(v UsageBillableSummaryBody) {
	o.SyntheticsBrowserChecksSum = &v
}

// GetTimeseriesAverage returns the TimeseriesAverage field value if set, zero value otherwise.
func (o *UsageBillableSummaryKeys) GetTimeseriesAverage() UsageBillableSummaryBody {
	if o == nil || o.TimeseriesAverage == nil {
		var ret UsageBillableSummaryBody
		return ret
	}
	return *o.TimeseriesAverage
}

// GetTimeseriesAverageOk returns a tuple with the TimeseriesAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageBillableSummaryKeys) GetTimeseriesAverageOk() (*UsageBillableSummaryBody, bool) {
	if o == nil || o.TimeseriesAverage == nil {
		return nil, false
	}
	return o.TimeseriesAverage, true
}

// HasTimeseriesAverage returns a boolean if a field has been set.
func (o *UsageBillableSummaryKeys) HasTimeseriesAverage() bool {
	if o != nil && o.TimeseriesAverage != nil {
		return true
	}

	return false
}

// SetTimeseriesAverage gets a reference to the given UsageBillableSummaryBody and assigns it to the TimeseriesAverage field.
func (o *UsageBillableSummaryKeys) SetTimeseriesAverage(v UsageBillableSummaryBody) {
	o.TimeseriesAverage = &v
}

func (o UsageBillableSummaryKeys) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApmHostSum != nil {
		toSerialize["apm_host_sum"] = o.ApmHostSum
	}
	if o.ApmHostTop99p != nil {
		toSerialize["apm_host_top99p"] = o.ApmHostTop99p
	}
	if o.ApmTraceSearchSum != nil {
		toSerialize["apm_trace_search_sum"] = o.ApmTraceSearchSum
	}
	if o.FargateContainerAverage != nil {
		toSerialize["fargate_container_average"] = o.FargateContainerAverage
	}
	if o.InfraContainerSum != nil {
		toSerialize["infra_container_sum"] = o.InfraContainerSum
	}
	if o.InfraHostSum != nil {
		toSerialize["infra_host_sum"] = o.InfraHostSum
	}
	if o.InfraHostTop99p != nil {
		toSerialize["infra_host_top99p"] = o.InfraHostTop99p
	}
	if o.IotTop99p != nil {
		toSerialize["iot_top99p"] = o.IotTop99p
	}
	if o.LambdaFunctionAverage != nil {
		toSerialize["lambda_function_average"] = o.LambdaFunctionAverage
	}
	if o.LogsIndexedSum != nil {
		toSerialize["logs_indexed_sum"] = o.LogsIndexedSum
	}
	if o.LogsIngestedSum != nil {
		toSerialize["logs_ingested_sum"] = o.LogsIngestedSum
	}
	if o.NpmFlowSum != nil {
		toSerialize["npm_flow_sum"] = o.NpmFlowSum
	}
	if o.NpmHostTop99p != nil {
		toSerialize["npm_host_top99p"] = o.NpmHostTop99p
	}
	if o.RumSum != nil {
		toSerialize["rum_sum"] = o.RumSum
	}
	if o.SiemSum != nil {
		toSerialize["siem_sum"] = o.SiemSum
	}
	if o.SyntheticsApiTestsSum != nil {
		toSerialize["synthetics_api_tests_sum"] = o.SyntheticsApiTestsSum
	}
	if o.SyntheticsBrowserChecksSum != nil {
		toSerialize["synthetics_browser_checks_sum"] = o.SyntheticsBrowserChecksSum
	}
	if o.TimeseriesAverage != nil {
		toSerialize["timeseries_average"] = o.TimeseriesAverage
	}
	return json.Marshal(toSerialize)
}

type NullableUsageBillableSummaryKeys struct {
	value *UsageBillableSummaryKeys
	isSet bool
}

func (v NullableUsageBillableSummaryKeys) Get() *UsageBillableSummaryKeys {
	return v.value
}

func (v *NullableUsageBillableSummaryKeys) Set(val *UsageBillableSummaryKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageBillableSummaryKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageBillableSummaryKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageBillableSummaryKeys(val *UsageBillableSummaryKeys) *NullableUsageBillableSummaryKeys {
	return &NullableUsageBillableSummaryKeys{value: val, isSet: true}
}

func (v NullableUsageBillableSummaryKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageBillableSummaryKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
