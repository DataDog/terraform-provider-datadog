/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsArchiveDestinationS3 The S3 archive destination.
type LogsArchiveDestinationS3 struct {
	// The bucket where the archive will be stored.
	Bucket      string                   `json:"bucket"`
	Integration LogsArchiveIntegrationS3 `json:"integration"`
	// The archive path.
	Path *string                      `json:"path,omitempty"`
	Type LogsArchiveDestinationS3Type `json:"type"`
}

// NewLogsArchiveDestinationS3 instantiates a new LogsArchiveDestinationS3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsArchiveDestinationS3(bucket string, integration LogsArchiveIntegrationS3, type_ LogsArchiveDestinationS3Type) *LogsArchiveDestinationS3 {
	this := LogsArchiveDestinationS3{}
	this.Bucket = bucket
	this.Integration = integration
	this.Type = type_
	return &this
}

// NewLogsArchiveDestinationS3WithDefaults instantiates a new LogsArchiveDestinationS3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsArchiveDestinationS3WithDefaults() *LogsArchiveDestinationS3 {
	this := LogsArchiveDestinationS3{}
	var type_ LogsArchiveDestinationS3Type = "s3"
	this.Type = type_
	return &this
}

// GetBucket returns the Bucket field value
func (o *LogsArchiveDestinationS3) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *LogsArchiveDestinationS3) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *LogsArchiveDestinationS3) SetBucket(v string) {
	o.Bucket = v
}

// GetIntegration returns the Integration field value
func (o *LogsArchiveDestinationS3) GetIntegration() LogsArchiveIntegrationS3 {
	if o == nil {
		var ret LogsArchiveIntegrationS3
		return ret
	}

	return o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value
// and a boolean to check if the value has been set.
func (o *LogsArchiveDestinationS3) GetIntegrationOk() (*LogsArchiveIntegrationS3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Integration, true
}

// SetIntegration sets field value
func (o *LogsArchiveDestinationS3) SetIntegration(v LogsArchiveIntegrationS3) {
	o.Integration = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *LogsArchiveDestinationS3) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsArchiveDestinationS3) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *LogsArchiveDestinationS3) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *LogsArchiveDestinationS3) SetPath(v string) {
	o.Path = &v
}

// GetType returns the Type field value
func (o *LogsArchiveDestinationS3) GetType() LogsArchiveDestinationS3Type {
	if o == nil {
		var ret LogsArchiveDestinationS3Type
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LogsArchiveDestinationS3) GetTypeOk() (*LogsArchiveDestinationS3Type, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LogsArchiveDestinationS3) SetType(v LogsArchiveDestinationS3Type) {
	o.Type = v
}

func (o LogsArchiveDestinationS3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bucket"] = o.Bucket
	}
	if true {
		toSerialize["integration"] = o.Integration
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLogsArchiveDestinationS3 struct {
	value *LogsArchiveDestinationS3
	isSet bool
}

func (v NullableLogsArchiveDestinationS3) Get() *LogsArchiveDestinationS3 {
	return v.value
}

func (v *NullableLogsArchiveDestinationS3) Set(val *LogsArchiveDestinationS3) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsArchiveDestinationS3) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsArchiveDestinationS3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsArchiveDestinationS3(val *LogsArchiveDestinationS3) *NullableLogsArchiveDestinationS3 {
	return &NullableLogsArchiveDestinationS3{value: val, isSet: true}
}

func (v NullableLogsArchiveDestinationS3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsArchiveDestinationS3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
