/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RelationshipToOrganizations Relationship to organizations.
type RelationshipToOrganizations struct {
	// Relationships to organization objects.
	Data []RelationshipToOrganizationData `json:"data"`
}

// NewRelationshipToOrganizations instantiates a new RelationshipToOrganizations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipToOrganizations(data []RelationshipToOrganizationData) *RelationshipToOrganizations {
	this := RelationshipToOrganizations{}
	this.Data = data
	return &this
}

// NewRelationshipToOrganizationsWithDefaults instantiates a new RelationshipToOrganizations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipToOrganizationsWithDefaults() *RelationshipToOrganizations {
	this := RelationshipToOrganizations{}
	return &this
}

// GetData returns the Data field value
func (o *RelationshipToOrganizations) GetData() []RelationshipToOrganizationData {
	if o == nil {
		var ret []RelationshipToOrganizationData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RelationshipToOrganizations) GetDataOk() (*[]RelationshipToOrganizationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *RelationshipToOrganizations) SetData(v []RelationshipToOrganizationData) {
	o.Data = v
}

func (o RelationshipToOrganizations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipToOrganizations struct {
	value *RelationshipToOrganizations
	isSet bool
}

func (v NullableRelationshipToOrganizations) Get() *RelationshipToOrganizations {
	return v.value
}

func (v *NullableRelationshipToOrganizations) Set(val *RelationshipToOrganizations) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipToOrganizations) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipToOrganizations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipToOrganizations(val *RelationshipToOrganizations) *NullableRelationshipToOrganizations {
	return &NullableRelationshipToOrganizations{value: val, isSet: true}
}

func (v NullableRelationshipToOrganizations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipToOrganizations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
