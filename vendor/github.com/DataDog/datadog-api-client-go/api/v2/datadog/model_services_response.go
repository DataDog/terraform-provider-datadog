/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// ServicesResponse Response with a list of service payloads.
type ServicesResponse struct {
	// An array of services.
	Data []ServiceResponseData `json:"data"`
	// Included related resources which the user requested.
	Included *[]ServiceIncludedItems `json:"included,omitempty"`
	Meta     *ServicesResponseMeta   `json:"meta,omitempty"`
}

// NewServicesResponse instantiates a new ServicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesResponse(data []ServiceResponseData) *ServicesResponse {
	this := ServicesResponse{}
	this.Data = data
	return &this
}

// NewServicesResponseWithDefaults instantiates a new ServicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesResponseWithDefaults() *ServicesResponse {
	this := ServicesResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ServicesResponse) GetData() []ServiceResponseData {
	if o == nil {
		var ret []ServiceResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ServicesResponse) GetDataOk() (*[]ServiceResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ServicesResponse) SetData(v []ServiceResponseData) {
	o.Data = v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ServicesResponse) GetIncluded() []ServiceIncludedItems {
	if o == nil || o.Included == nil {
		var ret []ServiceIncludedItems
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesResponse) GetIncludedOk() (*[]ServiceIncludedItems, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ServicesResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given []ServiceIncludedItems and assigns it to the Included field.
func (o *ServicesResponse) SetIncluded(v []ServiceIncludedItems) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ServicesResponse) GetMeta() ServicesResponseMeta {
	if o == nil || o.Meta == nil {
		var ret ServicesResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesResponse) GetMetaOk() (*ServicesResponseMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ServicesResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ServicesResponseMeta and assigns it to the Meta field.
func (o *ServicesResponse) SetMeta(v ServicesResponseMeta) {
	o.Meta = &v
}

func (o ServicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableServicesResponse struct {
	value *ServicesResponse
	isSet bool
}

func (v NullableServicesResponse) Get() *ServicesResponse {
	return v.value
}

func (v *NullableServicesResponse) Set(val *ServicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesResponse(val *ServicesResponse) *NullableServicesResponse {
	return &NullableServicesResponse{value: val, isSet: true}
}

func (v NullableServicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
