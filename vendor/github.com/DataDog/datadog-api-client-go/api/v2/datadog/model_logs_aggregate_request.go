/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsAggregateRequest The object sent with the request to retrieve a list of logs from your organization.
type LogsAggregateRequest struct {
	// The list of metrics or timeseries to compute for the retrieved buckets.
	Compute *[]LogsCompute   `json:"compute,omitempty"`
	Filter  *LogsQueryFilter `json:"filter,omitempty"`
	// The rules for the group by
	GroupBy *[]LogsGroupBy              `json:"group_by,omitempty"`
	Options *LogsQueryOptions           `json:"options,omitempty"`
	Paging  *LogsAggregateRequestPaging `json:"paging,omitempty"`
}

// NewLogsAggregateRequest instantiates a new LogsAggregateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAggregateRequest() *LogsAggregateRequest {
	this := LogsAggregateRequest{}
	return &this
}

// NewLogsAggregateRequestWithDefaults instantiates a new LogsAggregateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAggregateRequestWithDefaults() *LogsAggregateRequest {
	this := LogsAggregateRequest{}
	return &this
}

// GetCompute returns the Compute field value if set, zero value otherwise.
func (o *LogsAggregateRequest) GetCompute() []LogsCompute {
	if o == nil || o.Compute == nil {
		var ret []LogsCompute
		return ret
	}
	return *o.Compute
}

// GetComputeOk returns a tuple with the Compute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregateRequest) GetComputeOk() (*[]LogsCompute, bool) {
	if o == nil || o.Compute == nil {
		return nil, false
	}
	return o.Compute, true
}

// HasCompute returns a boolean if a field has been set.
func (o *LogsAggregateRequest) HasCompute() bool {
	if o != nil && o.Compute != nil {
		return true
	}

	return false
}

// SetCompute gets a reference to the given []LogsCompute and assigns it to the Compute field.
func (o *LogsAggregateRequest) SetCompute(v []LogsCompute) {
	o.Compute = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *LogsAggregateRequest) GetFilter() LogsQueryFilter {
	if o == nil || o.Filter == nil {
		var ret LogsQueryFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregateRequest) GetFilterOk() (*LogsQueryFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *LogsAggregateRequest) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given LogsQueryFilter and assigns it to the Filter field.
func (o *LogsAggregateRequest) SetFilter(v LogsQueryFilter) {
	o.Filter = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *LogsAggregateRequest) GetGroupBy() []LogsGroupBy {
	if o == nil || o.GroupBy == nil {
		var ret []LogsGroupBy
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregateRequest) GetGroupByOk() (*[]LogsGroupBy, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *LogsAggregateRequest) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []LogsGroupBy and assigns it to the GroupBy field.
func (o *LogsAggregateRequest) SetGroupBy(v []LogsGroupBy) {
	o.GroupBy = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *LogsAggregateRequest) GetOptions() LogsQueryOptions {
	if o == nil || o.Options == nil {
		var ret LogsQueryOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregateRequest) GetOptionsOk() (*LogsQueryOptions, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *LogsAggregateRequest) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given LogsQueryOptions and assigns it to the Options field.
func (o *LogsAggregateRequest) SetOptions(v LogsQueryOptions) {
	o.Options = &v
}

// GetPaging returns the Paging field value if set, zero value otherwise.
func (o *LogsAggregateRequest) GetPaging() LogsAggregateRequestPaging {
	if o == nil || o.Paging == nil {
		var ret LogsAggregateRequestPaging
		return ret
	}
	return *o.Paging
}

// GetPagingOk returns a tuple with the Paging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsAggregateRequest) GetPagingOk() (*LogsAggregateRequestPaging, bool) {
	if o == nil || o.Paging == nil {
		return nil, false
	}
	return o.Paging, true
}

// HasPaging returns a boolean if a field has been set.
func (o *LogsAggregateRequest) HasPaging() bool {
	if o != nil && o.Paging != nil {
		return true
	}

	return false
}

// SetPaging gets a reference to the given LogsAggregateRequestPaging and assigns it to the Paging field.
func (o *LogsAggregateRequest) SetPaging(v LogsAggregateRequestPaging) {
	o.Paging = &v
}

func (o LogsAggregateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compute != nil {
		toSerialize["compute"] = o.Compute
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.GroupBy != nil {
		toSerialize["group_by"] = o.GroupBy
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Paging != nil {
		toSerialize["paging"] = o.Paging
	}
	return json.Marshal(toSerialize)
}

type NullableLogsAggregateRequest struct {
	value *LogsAggregateRequest
	isSet bool
}

func (v NullableLogsAggregateRequest) Get() *LogsAggregateRequest {
	return v.value
}

func (v *NullableLogsAggregateRequest) Set(val *LogsAggregateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAggregateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAggregateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAggregateRequest(val *LogsAggregateRequest) *NullableLogsAggregateRequest {
	return &NullableLogsAggregateRequest{value: val, isSet: true}
}

func (v NullableLogsAggregateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAggregateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
