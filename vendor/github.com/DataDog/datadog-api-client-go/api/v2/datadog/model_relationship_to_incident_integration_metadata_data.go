/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RelationshipToIncidentIntegrationMetadataData A relationship reference for an integration metadata object.
type RelationshipToIncidentIntegrationMetadataData struct {
	// A unique identifier that represents the integration metadata.
	Id   string                          `json:"id"`
	Type IncidentIntegrationMetadataType `json:"type"`
}

// NewRelationshipToIncidentIntegrationMetadataData instantiates a new RelationshipToIncidentIntegrationMetadataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipToIncidentIntegrationMetadataData(id string, type_ IncidentIntegrationMetadataType) *RelationshipToIncidentIntegrationMetadataData {
	this := RelationshipToIncidentIntegrationMetadataData{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewRelationshipToIncidentIntegrationMetadataDataWithDefaults instantiates a new RelationshipToIncidentIntegrationMetadataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipToIncidentIntegrationMetadataDataWithDefaults() *RelationshipToIncidentIntegrationMetadataData {
	this := RelationshipToIncidentIntegrationMetadataData{}
	var type_ IncidentIntegrationMetadataType = "incident_integration_metadata"
	this.Type = type_
	return &this
}

// GetId returns the Id field value
func (o *RelationshipToIncidentIntegrationMetadataData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelationshipToIncidentIntegrationMetadataData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelationshipToIncidentIntegrationMetadataData) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *RelationshipToIncidentIntegrationMetadataData) GetType() IncidentIntegrationMetadataType {
	if o == nil {
		var ret IncidentIntegrationMetadataType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RelationshipToIncidentIntegrationMetadataData) GetTypeOk() (*IncidentIntegrationMetadataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RelationshipToIncidentIntegrationMetadataData) SetType(v IncidentIntegrationMetadataType) {
	o.Type = v
}

func (o RelationshipToIncidentIntegrationMetadataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipToIncidentIntegrationMetadataData struct {
	value *RelationshipToIncidentIntegrationMetadataData
	isSet bool
}

func (v NullableRelationshipToIncidentIntegrationMetadataData) Get() *RelationshipToIncidentIntegrationMetadataData {
	return v.value
}

func (v *NullableRelationshipToIncidentIntegrationMetadataData) Set(val *RelationshipToIncidentIntegrationMetadataData) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipToIncidentIntegrationMetadataData) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipToIncidentIntegrationMetadataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipToIncidentIntegrationMetadataData(val *RelationshipToIncidentIntegrationMetadataData) *NullableRelationshipToIncidentIntegrationMetadataData {
	return &NullableRelationshipToIncidentIntegrationMetadataData{value: val, isSet: true}
}

func (v NullableRelationshipToIncidentIntegrationMetadataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipToIncidentIntegrationMetadataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
