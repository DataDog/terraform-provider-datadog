/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// ServiceResponse Response with a service payload.
type ServiceResponse struct {
	Data ServiceResponseData `json:"data"`
	// Included objects from relationships.
	Included *[]ServiceIncludedItems `json:"included,omitempty"`
}

// NewServiceResponse instantiates a new ServiceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceResponse(data ServiceResponseData) *ServiceResponse {
	this := ServiceResponse{}
	this.Data = data
	return &this
}

// NewServiceResponseWithDefaults instantiates a new ServiceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceResponseWithDefaults() *ServiceResponse {
	this := ServiceResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ServiceResponse) GetData() ServiceResponseData {
	if o == nil {
		var ret ServiceResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ServiceResponse) GetDataOk() (*ServiceResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ServiceResponse) SetData(v ServiceResponseData) {
	o.Data = v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ServiceResponse) GetIncluded() []ServiceIncludedItems {
	if o == nil || o.Included == nil {
		var ret []ServiceIncludedItems
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceResponse) GetIncludedOk() (*[]ServiceIncludedItems, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ServiceResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given []ServiceIncludedItems and assigns it to the Included field.
func (o *ServiceResponse) SetIncluded(v []ServiceIncludedItems) {
	o.Included = &v
}

func (o ServiceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	return json.Marshal(toSerialize)
}

type NullableServiceResponse struct {
	value *ServiceResponse
	isSet bool
}

func (v NullableServiceResponse) Get() *ServiceResponse {
	return v.value
}

func (v *NullableServiceResponse) Set(val *ServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceResponse(val *ServiceResponse) *NullableServiceResponse {
	return &NullableServiceResponse{value: val, isSet: true}
}

func (v NullableServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
