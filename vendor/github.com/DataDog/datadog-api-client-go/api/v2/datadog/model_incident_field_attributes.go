/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// IncidentFieldAttributes - Dynamic fields for which selections can be made, with field names as keys.
type IncidentFieldAttributes struct {
	IncidentFieldAttributesMultipleValue *IncidentFieldAttributesMultipleValue
	IncidentFieldAttributesSingleValue   *IncidentFieldAttributesSingleValue
}

// IncidentFieldAttributesMultipleValueAsIncidentFieldAttributes is a convenience function that returns IncidentFieldAttributesMultipleValue wrapped in IncidentFieldAttributes
func IncidentFieldAttributesMultipleValueAsIncidentFieldAttributes(v *IncidentFieldAttributesMultipleValue) IncidentFieldAttributes {
	return IncidentFieldAttributes{IncidentFieldAttributesMultipleValue: v}
}

// IncidentFieldAttributesSingleValueAsIncidentFieldAttributes is a convenience function that returns IncidentFieldAttributesSingleValue wrapped in IncidentFieldAttributes
func IncidentFieldAttributesSingleValueAsIncidentFieldAttributes(v *IncidentFieldAttributesSingleValue) IncidentFieldAttributes {
	return IncidentFieldAttributes{IncidentFieldAttributesSingleValue: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentFieldAttributes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IncidentFieldAttributesMultipleValue
	err = json.Unmarshal(data, &dst.IncidentFieldAttributesMultipleValue)
	if err == nil {
		jsonIncidentFieldAttributesMultipleValue, _ := json.Marshal(dst.IncidentFieldAttributesMultipleValue)
		if string(jsonIncidentFieldAttributesMultipleValue) == "{}" { // empty struct
			dst.IncidentFieldAttributesMultipleValue = nil
		} else {
			match++
		}
	} else {
		dst.IncidentFieldAttributesMultipleValue = nil
	}

	// try to unmarshal data into IncidentFieldAttributesSingleValue
	err = json.Unmarshal(data, &dst.IncidentFieldAttributesSingleValue)
	if err == nil {
		jsonIncidentFieldAttributesSingleValue, _ := json.Marshal(dst.IncidentFieldAttributesSingleValue)
		if string(jsonIncidentFieldAttributesSingleValue) == "{}" { // empty struct
			dst.IncidentFieldAttributesSingleValue = nil
		} else {
			match++
		}
	} else {
		dst.IncidentFieldAttributesSingleValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IncidentFieldAttributesMultipleValue = nil
		dst.IncidentFieldAttributesSingleValue = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IncidentFieldAttributes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IncidentFieldAttributes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentFieldAttributes) MarshalJSON() ([]byte, error) {
	if src.IncidentFieldAttributesMultipleValue != nil {
		return json.Marshal(&src.IncidentFieldAttributesMultipleValue)
	}

	if src.IncidentFieldAttributesSingleValue != nil {
		return json.Marshal(&src.IncidentFieldAttributesSingleValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentFieldAttributes) GetActualInstance() interface{} {
	if obj.IncidentFieldAttributesMultipleValue != nil {
		return obj.IncidentFieldAttributesMultipleValue
	}

	if obj.IncidentFieldAttributesSingleValue != nil {
		return obj.IncidentFieldAttributesSingleValue
	}

	// all schemas are nil
	return nil
}

type NullableIncidentFieldAttributes struct {
	value *IncidentFieldAttributes
	isSet bool
}

func (v NullableIncidentFieldAttributes) Get() *IncidentFieldAttributes {
	return v.value
}

func (v *NullableIncidentFieldAttributes) Set(val *IncidentFieldAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFieldAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFieldAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFieldAttributes(val *IncidentFieldAttributes) *NullableIncidentFieldAttributes {
	return &NullableIncidentFieldAttributes{value: val, isSet: true}
}

func (v NullableIncidentFieldAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFieldAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
