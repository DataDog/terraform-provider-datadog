/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserCreateAttributes Attributes of the created user.
type UserCreateAttributes struct {
	// The email of the user.
	Email string `json:"email"`
	// The name of the user.
	Name *string `json:"name,omitempty"`
	// The title of the user.
	Title *string `json:"title,omitempty"`
}

// NewUserCreateAttributes instantiates a new UserCreateAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreateAttributes(email string) *UserCreateAttributes {
	this := UserCreateAttributes{}
	this.Email = email
	return &this
}

// NewUserCreateAttributesWithDefaults instantiates a new UserCreateAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreateAttributesWithDefaults() *UserCreateAttributes {
	this := UserCreateAttributes{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserCreateAttributes) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserCreateAttributes) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserCreateAttributes) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserCreateAttributes) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateAttributes) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserCreateAttributes) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserCreateAttributes) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UserCreateAttributes) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateAttributes) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UserCreateAttributes) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UserCreateAttributes) SetTitle(v string) {
	o.Title = &v
}

func (o UserCreateAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableUserCreateAttributes struct {
	value *UserCreateAttributes
	isSet bool
}

func (v NullableUserCreateAttributes) Get() *UserCreateAttributes {
	return v.value
}

func (v *NullableUserCreateAttributes) Set(val *UserCreateAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreateAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreateAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreateAttributes(val *UserCreateAttributes) *NullableUserCreateAttributes {
	return &NullableUserCreateAttributes{value: val, isSet: true}
}

func (v NullableUserCreateAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreateAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
