/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// IncidentResponseIncludedItem - An object related to an incident that is included in the response.
type IncidentResponseIncludedItem struct {
	User *User
}

// UserAsIncidentResponseIncludedItem is a convenience function that returns User wrapped in IncidentResponseIncludedItem
func UserAsIncidentResponseIncludedItem(v *User) IncidentResponseIncludedItem {
	return IncidentResponseIncludedItem{User: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IncidentResponseIncludedItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into User
	err = json.Unmarshal(data, &dst.User)
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			match++
		}
	} else {
		dst.User = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.User = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IncidentResponseIncludedItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IncidentResponseIncludedItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IncidentResponseIncludedItem) MarshalJSON() ([]byte, error) {
	if src.User != nil {
		return json.Marshal(&src.User)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IncidentResponseIncludedItem) GetActualInstance() interface{} {
	if obj.User != nil {
		return obj.User
	}

	// all schemas are nil
	return nil
}

type NullableIncidentResponseIncludedItem struct {
	value *IncidentResponseIncludedItem
	isSet bool
}

func (v NullableIncidentResponseIncludedItem) Get() *IncidentResponseIncludedItem {
	return v.value
}

func (v *NullableIncidentResponseIncludedItem) Set(val *IncidentResponseIncludedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentResponseIncludedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentResponseIncludedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentResponseIncludedItem(val *IncidentResponseIncludedItem) *NullableIncidentResponseIncludedItem {
	return &NullableIncidentResponseIncludedItem{value: val, isSet: true}
}

func (v NullableIncidentResponseIncludedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentResponseIncludedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
