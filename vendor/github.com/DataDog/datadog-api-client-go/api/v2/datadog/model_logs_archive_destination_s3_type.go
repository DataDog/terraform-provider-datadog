/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// LogsArchiveDestinationS3Type Type of the S3 archive destination.
type LogsArchiveDestinationS3Type string

// List of LogsArchiveDestinationS3Type
const (
	LOGSARCHIVEDESTINATIONS3TYPE_S3 LogsArchiveDestinationS3Type = "s3"
)

func (v *LogsArchiveDestinationS3Type) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsArchiveDestinationS3Type(value)
	for _, existing := range []LogsArchiveDestinationS3Type{"s3"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsArchiveDestinationS3Type", value)
}

// Ptr returns reference to LogsArchiveDestinationS3Type value
func (v LogsArchiveDestinationS3Type) Ptr() *LogsArchiveDestinationS3Type {
	return &v
}

type NullableLogsArchiveDestinationS3Type struct {
	value *LogsArchiveDestinationS3Type
	isSet bool
}

func (v NullableLogsArchiveDestinationS3Type) Get() *LogsArchiveDestinationS3Type {
	return v.value
}

func (v *NullableLogsArchiveDestinationS3Type) Set(val *LogsArchiveDestinationS3Type) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsArchiveDestinationS3Type) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsArchiveDestinationS3Type) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsArchiveDestinationS3Type(val *LogsArchiveDestinationS3Type) *NullableLogsArchiveDestinationS3Type {
	return &NullableLogsArchiveDestinationS3Type{value: val, isSet: true}
}

func (v NullableLogsArchiveDestinationS3Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsArchiveDestinationS3Type) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
