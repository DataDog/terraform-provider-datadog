/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RoleCreateData Data related to the creation of a role.
type RoleCreateData struct {
	Attributes    RoleCreateAttributes `json:"attributes"`
	Relationships *RoleRelationships   `json:"relationships,omitempty"`
	Type          *RolesType           `json:"type,omitempty"`
}

// NewRoleCreateData instantiates a new RoleCreateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleCreateData(attributes RoleCreateAttributes) *RoleCreateData {
	this := RoleCreateData{}
	this.Attributes = attributes
	var type_ RolesType = "roles"
	this.Type = &type_
	return &this
}

// NewRoleCreateDataWithDefaults instantiates a new RoleCreateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleCreateDataWithDefaults() *RoleCreateData {
	this := RoleCreateData{}
	var type_ RolesType = "roles"
	this.Type = &type_
	return &this
}

// GetAttributes returns the Attributes field value
func (o *RoleCreateData) GetAttributes() RoleCreateAttributes {
	if o == nil {
		var ret RoleCreateAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *RoleCreateData) GetAttributesOk() (*RoleCreateAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *RoleCreateData) SetAttributes(v RoleCreateAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *RoleCreateData) GetRelationships() RoleRelationships {
	if o == nil || o.Relationships == nil {
		var ret RoleRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreateData) GetRelationshipsOk() (*RoleRelationships, bool) {
	if o == nil || o.Relationships == nil {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *RoleCreateData) HasRelationships() bool {
	if o != nil && o.Relationships != nil {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given RoleRelationships and assigns it to the Relationships field.
func (o *RoleCreateData) SetRelationships(v RoleRelationships) {
	o.Relationships = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleCreateData) GetType() RolesType {
	if o == nil || o.Type == nil {
		var ret RolesType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreateData) GetTypeOk() (*RolesType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleCreateData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given RolesType and assigns it to the Type field.
func (o *RoleCreateData) SetType(v RolesType) {
	o.Type = &v
}

func (o RoleCreateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Relationships != nil {
		toSerialize["relationships"] = o.Relationships
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRoleCreateData struct {
	value *RoleCreateData
	isSet bool
}

func (v NullableRoleCreateData) Get() *RoleCreateData {
	return v.value
}

func (v *NullableRoleCreateData) Set(val *RoleCreateData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleCreateData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleCreateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleCreateData(val *RoleCreateData) *NullableRoleCreateData {
	return &NullableRoleCreateData{value: val, isSet: true}
}

func (v NullableRoleCreateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleCreateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
