/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// IncidentTeamsResponse Response with a list of incident team payloads.
type IncidentTeamsResponse struct {
	// An array of incident teams.
	Data []IncidentTeamResponseData `json:"data"`
	// Included related resources which the user requested.
	Included *[]IncidentTeamIncludedItems  `json:"included,omitempty"`
	Meta     *IncidentServicesResponseMeta `json:"meta,omitempty"`
}

// NewIncidentTeamsResponse instantiates a new IncidentTeamsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentTeamsResponse(data []IncidentTeamResponseData) *IncidentTeamsResponse {
	this := IncidentTeamsResponse{}
	this.Data = data
	return &this
}

// NewIncidentTeamsResponseWithDefaults instantiates a new IncidentTeamsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTeamsResponseWithDefaults() *IncidentTeamsResponse {
	this := IncidentTeamsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *IncidentTeamsResponse) GetData() []IncidentTeamResponseData {
	if o == nil {
		var ret []IncidentTeamResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *IncidentTeamsResponse) GetDataOk() (*[]IncidentTeamResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *IncidentTeamsResponse) SetData(v []IncidentTeamResponseData) {
	o.Data = v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *IncidentTeamsResponse) GetIncluded() []IncidentTeamIncludedItems {
	if o == nil || o.Included == nil {
		var ret []IncidentTeamIncludedItems
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTeamsResponse) GetIncludedOk() (*[]IncidentTeamIncludedItems, bool) {
	if o == nil || o.Included == nil {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *IncidentTeamsResponse) HasIncluded() bool {
	if o != nil && o.Included != nil {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given []IncidentTeamIncludedItems and assigns it to the Included field.
func (o *IncidentTeamsResponse) SetIncluded(v []IncidentTeamIncludedItems) {
	o.Included = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *IncidentTeamsResponse) GetMeta() IncidentServicesResponseMeta {
	if o == nil || o.Meta == nil {
		var ret IncidentServicesResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTeamsResponse) GetMetaOk() (*IncidentServicesResponseMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *IncidentTeamsResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given IncidentServicesResponseMeta and assigns it to the Meta field.
func (o *IncidentTeamsResponse) SetMeta(v IncidentServicesResponseMeta) {
	o.Meta = &v
}

func (o IncidentTeamsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Included != nil {
		toSerialize["included"] = o.Included
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentTeamsResponse struct {
	value *IncidentTeamsResponse
	isSet bool
}

func (v NullableIncidentTeamsResponse) Get() *IncidentTeamsResponse {
	return v.value
}

func (v *NullableIncidentTeamsResponse) Set(val *IncidentTeamsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentTeamsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentTeamsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentTeamsResponse(val *IncidentTeamsResponse) *NullableIncidentTeamsResponse {
	return &NullableIncidentTeamsResponse{value: val, isSet: true}
}

func (v NullableIncidentTeamsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentTeamsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
