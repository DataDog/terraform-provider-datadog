/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// SecurityMonitoringRuleSeverity Severity of the Security Signal.
type SecurityMonitoringRuleSeverity string

// List of SecurityMonitoringRuleSeverity
const (
	SECURITYMONITORINGRULESEVERITY_INFO     SecurityMonitoringRuleSeverity = "info"
	SECURITYMONITORINGRULESEVERITY_LOW      SecurityMonitoringRuleSeverity = "low"
	SECURITYMONITORINGRULESEVERITY_MEDIUM   SecurityMonitoringRuleSeverity = "medium"
	SECURITYMONITORINGRULESEVERITY_HIGH     SecurityMonitoringRuleSeverity = "high"
	SECURITYMONITORINGRULESEVERITY_CRITICAL SecurityMonitoringRuleSeverity = "critical"
)

func (v *SecurityMonitoringRuleSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityMonitoringRuleSeverity(value)
	for _, existing := range []SecurityMonitoringRuleSeverity{"info", "low", "medium", "high", "critical"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecurityMonitoringRuleSeverity", value)
}

// Ptr returns reference to SecurityMonitoringRuleSeverity value
func (v SecurityMonitoringRuleSeverity) Ptr() *SecurityMonitoringRuleSeverity {
	return &v
}

type NullableSecurityMonitoringRuleSeverity struct {
	value *SecurityMonitoringRuleSeverity
	isSet bool
}

func (v NullableSecurityMonitoringRuleSeverity) Get() *SecurityMonitoringRuleSeverity {
	return v.value
}

func (v *NullableSecurityMonitoringRuleSeverity) Set(val *SecurityMonitoringRuleSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityMonitoringRuleSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityMonitoringRuleSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityMonitoringRuleSeverity(val *SecurityMonitoringRuleSeverity) *NullableSecurityMonitoringRuleSeverity {
	return &NullableSecurityMonitoringRuleSeverity{value: val, isSet: true}
}

func (v NullableSecurityMonitoringRuleSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityMonitoringRuleSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
