/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RelationshipToOrganizationData Relationship to organization object.
type RelationshipToOrganizationData struct {
	// ID of the organization.
	Id   *string            `json:"id,omitempty"`
	Type *OrganizationsType `json:"type,omitempty"`
}

// NewRelationshipToOrganizationData instantiates a new RelationshipToOrganizationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipToOrganizationData() *RelationshipToOrganizationData {
	this := RelationshipToOrganizationData{}
	var type_ OrganizationsType = "orgs"
	this.Type = &type_
	return &this
}

// NewRelationshipToOrganizationDataWithDefaults instantiates a new RelationshipToOrganizationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipToOrganizationDataWithDefaults() *RelationshipToOrganizationData {
	this := RelationshipToOrganizationData{}
	var type_ OrganizationsType = "orgs"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelationshipToOrganizationData) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipToOrganizationData) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelationshipToOrganizationData) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RelationshipToOrganizationData) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RelationshipToOrganizationData) GetType() OrganizationsType {
	if o == nil || o.Type == nil {
		var ret OrganizationsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipToOrganizationData) GetTypeOk() (*OrganizationsType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RelationshipToOrganizationData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given OrganizationsType and assigns it to the Type field.
func (o *RelationshipToOrganizationData) SetType(v OrganizationsType) {
	o.Type = &v
}

func (o RelationshipToOrganizationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipToOrganizationData struct {
	value *RelationshipToOrganizationData
	isSet bool
}

func (v NullableRelationshipToOrganizationData) Get() *RelationshipToOrganizationData {
	return v.value
}

func (v *NullableRelationshipToOrganizationData) Set(val *RelationshipToOrganizationData) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipToOrganizationData) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipToOrganizationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipToOrganizationData(val *RelationshipToOrganizationData) *NullableRelationshipToOrganizationData {
	return &NullableRelationshipToOrganizationData{value: val, isSet: true}
}

func (v NullableRelationshipToOrganizationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipToOrganizationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
