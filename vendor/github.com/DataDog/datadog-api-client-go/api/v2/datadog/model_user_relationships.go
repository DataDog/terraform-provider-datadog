/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserRelationships Relationships of the user object.
type UserRelationships struct {
	Roles *RelationshipToRoles `json:"roles,omitempty"`
}

// NewUserRelationships instantiates a new UserRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRelationships() *UserRelationships {
	this := UserRelationships{}
	return &this
}

// NewUserRelationshipsWithDefaults instantiates a new UserRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRelationshipsWithDefaults() *UserRelationships {
	this := UserRelationships{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserRelationships) GetRoles() RelationshipToRoles {
	if o == nil || o.Roles == nil {
		var ret RelationshipToRoles
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRelationships) GetRolesOk() (*RelationshipToRoles, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserRelationships) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given RelationshipToRoles and assigns it to the Roles field.
func (o *UserRelationships) SetRoles(v RelationshipToRoles) {
	o.Roles = &v
}

func (o UserRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableUserRelationships struct {
	value *UserRelationships
	isSet bool
}

func (v NullableUserRelationships) Get() *UserRelationships {
	return v.value
}

func (v *NullableUserRelationships) Set(val *UserRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRelationships(val *UserRelationships) *NullableUserRelationships {
	return &NullableUserRelationships{value: val, isSet: true}
}

func (v NullableUserRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
