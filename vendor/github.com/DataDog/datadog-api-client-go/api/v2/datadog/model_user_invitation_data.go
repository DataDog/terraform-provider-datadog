/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserInvitationData Object to create a user invitation.
type UserInvitationData struct {
	Relationships *UserInvitationRelationships `json:"relationships,omitempty"`
	Type          *UserInvitationsType         `json:"type,omitempty"`
}

// NewUserInvitationData instantiates a new UserInvitationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInvitationData() *UserInvitationData {
	this := UserInvitationData{}
	var type_ UserInvitationsType = "user_invitations"
	this.Type = &type_
	return &this
}

// NewUserInvitationDataWithDefaults instantiates a new UserInvitationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInvitationDataWithDefaults() *UserInvitationData {
	this := UserInvitationData{}
	var type_ UserInvitationsType = "user_invitations"
	this.Type = &type_
	return &this
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *UserInvitationData) GetRelationships() UserInvitationRelationships {
	if o == nil || o.Relationships == nil {
		var ret UserInvitationRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInvitationData) GetRelationshipsOk() (*UserInvitationRelationships, bool) {
	if o == nil || o.Relationships == nil {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *UserInvitationData) HasRelationships() bool {
	if o != nil && o.Relationships != nil {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given UserInvitationRelationships and assigns it to the Relationships field.
func (o *UserInvitationData) SetRelationships(v UserInvitationRelationships) {
	o.Relationships = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserInvitationData) GetType() UserInvitationsType {
	if o == nil || o.Type == nil {
		var ret UserInvitationsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInvitationData) GetTypeOk() (*UserInvitationsType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserInvitationData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given UserInvitationsType and assigns it to the Type field.
func (o *UserInvitationData) SetType(v UserInvitationsType) {
	o.Type = &v
}

func (o UserInvitationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Relationships != nil {
		toSerialize["relationships"] = o.Relationships
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUserInvitationData struct {
	value *UserInvitationData
	isSet bool
}

func (v NullableUserInvitationData) Get() *UserInvitationData {
	return v.value
}

func (v *NullableUserInvitationData) Set(val *UserInvitationData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvitationData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvitationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvitationData(val *UserInvitationData) *NullableUserInvitationData {
	return &NullableUserInvitationData{value: val, isSet: true}
}

func (v NullableUserInvitationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvitationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
