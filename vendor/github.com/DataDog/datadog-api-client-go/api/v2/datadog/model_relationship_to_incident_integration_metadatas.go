/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// RelationshipToIncidentIntegrationMetadatas A relationship reference for multiple integration metadata objects.
type RelationshipToIncidentIntegrationMetadatas struct {
	// The integration metadata relationship array
	Data []RelationshipToIncidentIntegrationMetadataData `json:"data"`
}

// NewRelationshipToIncidentIntegrationMetadatas instantiates a new RelationshipToIncidentIntegrationMetadatas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipToIncidentIntegrationMetadatas(data []RelationshipToIncidentIntegrationMetadataData) *RelationshipToIncidentIntegrationMetadatas {
	this := RelationshipToIncidentIntegrationMetadatas{}
	this.Data = data
	return &this
}

// NewRelationshipToIncidentIntegrationMetadatasWithDefaults instantiates a new RelationshipToIncidentIntegrationMetadatas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipToIncidentIntegrationMetadatasWithDefaults() *RelationshipToIncidentIntegrationMetadatas {
	this := RelationshipToIncidentIntegrationMetadatas{}
	return &this
}

// GetData returns the Data field value
func (o *RelationshipToIncidentIntegrationMetadatas) GetData() []RelationshipToIncidentIntegrationMetadataData {
	if o == nil {
		var ret []RelationshipToIncidentIntegrationMetadataData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RelationshipToIncidentIntegrationMetadatas) GetDataOk() (*[]RelationshipToIncidentIntegrationMetadataData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *RelationshipToIncidentIntegrationMetadatas) SetData(v []RelationshipToIncidentIntegrationMetadataData) {
	o.Data = v
}

func (o RelationshipToIncidentIntegrationMetadatas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipToIncidentIntegrationMetadatas struct {
	value *RelationshipToIncidentIntegrationMetadatas
	isSet bool
}

func (v NullableRelationshipToIncidentIntegrationMetadatas) Get() *RelationshipToIncidentIntegrationMetadatas {
	return v.value
}

func (v *NullableRelationshipToIncidentIntegrationMetadatas) Set(val *RelationshipToIncidentIntegrationMetadatas) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipToIncidentIntegrationMetadatas) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipToIncidentIntegrationMetadatas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipToIncidentIntegrationMetadatas(val *RelationshipToIncidentIntegrationMetadatas) *NullableRelationshipToIncidentIntegrationMetadatas {
	return &NullableRelationshipToIncidentIntegrationMetadatas{value: val, isSet: true}
}

func (v NullableRelationshipToIncidentIntegrationMetadatas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipToIncidentIntegrationMetadatas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
