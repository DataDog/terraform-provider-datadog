/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserUpdateData Object to update a user.
type UserUpdateData struct {
	Attributes UserUpdateAttributes `json:"attributes"`
	// ID of the user.
	Id   string    `json:"id"`
	Type UsersType `json:"type"`
}

// NewUserUpdateData instantiates a new UserUpdateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateData(attributes UserUpdateAttributes, id string, type_ UsersType) *UserUpdateData {
	this := UserUpdateData{}
	this.Attributes = attributes
	this.Id = id
	this.Type = type_
	return &this
}

// NewUserUpdateDataWithDefaults instantiates a new UserUpdateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateDataWithDefaults() *UserUpdateData {
	this := UserUpdateData{}
	var type_ UsersType = "users"
	this.Type = type_
	return &this
}

// GetAttributes returns the Attributes field value
func (o *UserUpdateData) GetAttributes() UserUpdateAttributes {
	if o == nil {
		var ret UserUpdateAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *UserUpdateData) GetAttributesOk() (*UserUpdateAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *UserUpdateData) SetAttributes(v UserUpdateAttributes) {
	o.Attributes = v
}

// GetId returns the Id field value
func (o *UserUpdateData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserUpdateData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserUpdateData) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *UserUpdateData) GetType() UsersType {
	if o == nil {
		var ret UsersType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserUpdateData) GetTypeOk() (*UsersType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserUpdateData) SetType(v UsersType) {
	o.Type = v
}

func (o UserUpdateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUserUpdateData struct {
	value *UserUpdateData
	isSet bool
}

func (v NullableUserUpdateData) Get() *UserUpdateData {
	return v.value
}

func (v *NullableUserUpdateData) Set(val *UserUpdateData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateData(val *UserUpdateData) *NullableUserUpdateData {
	return &NullableUserUpdateData{value: val, isSet: true}
}

func (v NullableUserUpdateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
