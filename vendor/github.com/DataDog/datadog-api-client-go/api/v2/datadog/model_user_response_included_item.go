/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// UserResponseIncludedItem - An object related to a user.
type UserResponseIncludedItem struct {
	Organization *Organization
	Permission   *Permission
	Role         *Role
}

// OrganizationAsUserResponseIncludedItem is a convenience function that returns Organization wrapped in UserResponseIncludedItem
func OrganizationAsUserResponseIncludedItem(v *Organization) UserResponseIncludedItem {
	return UserResponseIncludedItem{Organization: v}
}

// PermissionAsUserResponseIncludedItem is a convenience function that returns Permission wrapped in UserResponseIncludedItem
func PermissionAsUserResponseIncludedItem(v *Permission) UserResponseIncludedItem {
	return UserResponseIncludedItem{Permission: v}
}

// RoleAsUserResponseIncludedItem is a convenience function that returns Role wrapped in UserResponseIncludedItem
func RoleAsUserResponseIncludedItem(v *Role) UserResponseIncludedItem {
	return UserResponseIncludedItem{Role: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UserResponseIncludedItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Organization
	err = json.Unmarshal(data, &dst.Organization)
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			match++
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal data into Permission
	err = json.Unmarshal(data, &dst.Permission)
	if err == nil {
		jsonPermission, _ := json.Marshal(dst.Permission)
		if string(jsonPermission) == "{}" { // empty struct
			dst.Permission = nil
		} else {
			match++
		}
	} else {
		dst.Permission = nil
	}

	// try to unmarshal data into Role
	err = json.Unmarshal(data, &dst.Role)
	if err == nil {
		jsonRole, _ := json.Marshal(dst.Role)
		if string(jsonRole) == "{}" { // empty struct
			dst.Role = nil
		} else {
			match++
		}
	} else {
		dst.Role = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Organization = nil
		dst.Permission = nil
		dst.Role = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UserResponseIncludedItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UserResponseIncludedItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserResponseIncludedItem) MarshalJSON() ([]byte, error) {
	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.Permission != nil {
		return json.Marshal(&src.Permission)
	}

	if src.Role != nil {
		return json.Marshal(&src.Role)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UserResponseIncludedItem) GetActualInstance() interface{} {
	if obj.Organization != nil {
		return obj.Organization
	}

	if obj.Permission != nil {
		return obj.Permission
	}

	if obj.Role != nil {
		return obj.Role
	}

	// all schemas are nil
	return nil
}

type NullableUserResponseIncludedItem struct {
	value *UserResponseIncludedItem
	isSet bool
}

func (v NullableUserResponseIncludedItem) Get() *UserResponseIncludedItem {
	return v.value
}

func (v *NullableUserResponseIncludedItem) Set(val *UserResponseIncludedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResponseIncludedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResponseIncludedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResponseIncludedItem(val *UserResponseIncludedItem) *NullableUserResponseIncludedItem {
	return &NullableUserResponseIncludedItem{value: val, isSet: true}
}

func (v NullableUserResponseIncludedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResponseIncludedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
