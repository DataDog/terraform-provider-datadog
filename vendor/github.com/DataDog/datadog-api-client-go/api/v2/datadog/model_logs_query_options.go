/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsQueryOptions Global query options that are used during the query. Note: You should only supply timezone or time offset but not both otherwise the query will fail.
type LogsQueryOptions struct {
	// The time offset (in seconds) to apply to the query.
	TimeOffset *int32 `json:"timeOffset,omitempty"`
	// The timezone can be specified both as an offset, for example: \"UTC+03:00\".
	Timezone *string `json:"timezone,omitempty"`
}

// NewLogsQueryOptions instantiates a new LogsQueryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsQueryOptions() *LogsQueryOptions {
	this := LogsQueryOptions{}
	var timezone string = "UTC"
	this.Timezone = &timezone
	return &this
}

// NewLogsQueryOptionsWithDefaults instantiates a new LogsQueryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsQueryOptionsWithDefaults() *LogsQueryOptions {
	this := LogsQueryOptions{}
	var timezone string = "UTC"
	this.Timezone = &timezone
	return &this
}

// GetTimeOffset returns the TimeOffset field value if set, zero value otherwise.
func (o *LogsQueryOptions) GetTimeOffset() int32 {
	if o == nil || o.TimeOffset == nil {
		var ret int32
		return ret
	}
	return *o.TimeOffset
}

// GetTimeOffsetOk returns a tuple with the TimeOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsQueryOptions) GetTimeOffsetOk() (*int32, bool) {
	if o == nil || o.TimeOffset == nil {
		return nil, false
	}
	return o.TimeOffset, true
}

// HasTimeOffset returns a boolean if a field has been set.
func (o *LogsQueryOptions) HasTimeOffset() bool {
	if o != nil && o.TimeOffset != nil {
		return true
	}

	return false
}

// SetTimeOffset gets a reference to the given int32 and assigns it to the TimeOffset field.
func (o *LogsQueryOptions) SetTimeOffset(v int32) {
	o.TimeOffset = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *LogsQueryOptions) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsQueryOptions) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *LogsQueryOptions) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *LogsQueryOptions) SetTimezone(v string) {
	o.Timezone = &v
}

func (o LogsQueryOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TimeOffset != nil {
		toSerialize["timeOffset"] = o.TimeOffset
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	return json.Marshal(toSerialize)
}

type NullableLogsQueryOptions struct {
	value *LogsQueryOptions
	isSet bool
}

func (v NullableLogsQueryOptions) Get() *LogsQueryOptions {
	return v.value
}

func (v *NullableLogsQueryOptions) Set(val *LogsQueryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsQueryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsQueryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsQueryOptions(val *LogsQueryOptions) *NullableLogsQueryOptions {
	return &NullableLogsQueryOptions{value: val, isSet: true}
}

func (v NullableLogsQueryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsQueryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
