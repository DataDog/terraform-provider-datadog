/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserInvitationResponse User invitation as returned by the API.
type UserInvitationResponse struct {
	Data *UserInvitationResponseData `json:"data,omitempty"`
}

// NewUserInvitationResponse instantiates a new UserInvitationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInvitationResponse() *UserInvitationResponse {
	this := UserInvitationResponse{}
	return &this
}

// NewUserInvitationResponseWithDefaults instantiates a new UserInvitationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInvitationResponseWithDefaults() *UserInvitationResponse {
	this := UserInvitationResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UserInvitationResponse) GetData() UserInvitationResponseData {
	if o == nil || o.Data == nil {
		var ret UserInvitationResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInvitationResponse) GetDataOk() (*UserInvitationResponseData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UserInvitationResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given UserInvitationResponseData and assigns it to the Data field.
func (o *UserInvitationResponse) SetData(v UserInvitationResponseData) {
	o.Data = &v
}

func (o UserInvitationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableUserInvitationResponse struct {
	value *UserInvitationResponse
	isSet bool
}

func (v NullableUserInvitationResponse) Get() *UserInvitationResponse {
	return v.value
}

func (v *NullableUserInvitationResponse) Set(val *UserInvitationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvitationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvitationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvitationResponse(val *UserInvitationResponse) *NullableUserInvitationResponse {
	return &NullableUserInvitationResponse{value: val, isSet: true}
}

func (v NullableUserInvitationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvitationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
