/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// UserInvitationsRequest Object to invite users to join the organization.
type UserInvitationsRequest struct {
	// List of user invitations.
	Data []UserInvitationData `json:"data"`
}

// NewUserInvitationsRequest instantiates a new UserInvitationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInvitationsRequest(data []UserInvitationData) *UserInvitationsRequest {
	this := UserInvitationsRequest{}
	this.Data = data
	return &this
}

// NewUserInvitationsRequestWithDefaults instantiates a new UserInvitationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInvitationsRequestWithDefaults() *UserInvitationsRequest {
	this := UserInvitationsRequest{}
	return &this
}

// GetData returns the Data field value
func (o *UserInvitationsRequest) GetData() []UserInvitationData {
	if o == nil {
		var ret []UserInvitationData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UserInvitationsRequest) GetDataOk() (*[]UserInvitationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UserInvitationsRequest) SetData(v []UserInvitationData) {
	o.Data = v
}

func (o UserInvitationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableUserInvitationsRequest struct {
	value *UserInvitationsRequest
	isSet bool
}

func (v NullableUserInvitationsRequest) Get() *UserInvitationsRequest {
	return v.value
}

func (v *NullableUserInvitationsRequest) Set(val *UserInvitationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvitationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvitationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvitationsRequest(val *UserInvitationsRequest) *NullableUserInvitationsRequest {
	return &NullableUserInvitationsRequest{value: val, isSet: true}
}

func (v NullableUserInvitationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvitationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
