/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// LogsGroupBy A group by rule
type LogsGroupBy struct {
	// The name of the facet to use (required)
	Facet     string                `json:"facet"`
	Histogram *LogsGroupByHistogram `json:"histogram,omitempty"`
	// The maximum buckets to return for this group by
	Limit   *int32              `json:"limit,omitempty"`
	Missing *LogsGroupByMissing `json:"missing,omitempty"`
	Sort    *LogsAggregateSort  `json:"sort,omitempty"`
	Total   *LogsGroupByTotal   `json:"total,omitempty"`
}

// NewLogsGroupBy instantiates a new LogsGroupBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsGroupBy(facet string) *LogsGroupBy {
	this := LogsGroupBy{}
	this.Facet = facet
	var limit int32 = 10
	this.Limit = &limit
	return &this
}

// NewLogsGroupByWithDefaults instantiates a new LogsGroupBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsGroupByWithDefaults() *LogsGroupBy {
	this := LogsGroupBy{}
	var limit int32 = 10
	this.Limit = &limit
	return &this
}

// GetFacet returns the Facet field value
func (o *LogsGroupBy) GetFacet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Facet
}

// GetFacetOk returns a tuple with the Facet field value
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetFacetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Facet, true
}

// SetFacet sets field value
func (o *LogsGroupBy) SetFacet(v string) {
	o.Facet = v
}

// GetHistogram returns the Histogram field value if set, zero value otherwise.
func (o *LogsGroupBy) GetHistogram() LogsGroupByHistogram {
	if o == nil || o.Histogram == nil {
		var ret LogsGroupByHistogram
		return ret
	}
	return *o.Histogram
}

// GetHistogramOk returns a tuple with the Histogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetHistogramOk() (*LogsGroupByHistogram, bool) {
	if o == nil || o.Histogram == nil {
		return nil, false
	}
	return o.Histogram, true
}

// HasHistogram returns a boolean if a field has been set.
func (o *LogsGroupBy) HasHistogram() bool {
	if o != nil && o.Histogram != nil {
		return true
	}

	return false
}

// SetHistogram gets a reference to the given LogsGroupByHistogram and assigns it to the Histogram field.
func (o *LogsGroupBy) SetHistogram(v LogsGroupByHistogram) {
	o.Histogram = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *LogsGroupBy) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *LogsGroupBy) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *LogsGroupBy) SetLimit(v int32) {
	o.Limit = &v
}

// GetMissing returns the Missing field value if set, zero value otherwise.
func (o *LogsGroupBy) GetMissing() LogsGroupByMissing {
	if o == nil || o.Missing == nil {
		var ret LogsGroupByMissing
		return ret
	}
	return *o.Missing
}

// GetMissingOk returns a tuple with the Missing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetMissingOk() (*LogsGroupByMissing, bool) {
	if o == nil || o.Missing == nil {
		return nil, false
	}
	return o.Missing, true
}

// HasMissing returns a boolean if a field has been set.
func (o *LogsGroupBy) HasMissing() bool {
	if o != nil && o.Missing != nil {
		return true
	}

	return false
}

// SetMissing gets a reference to the given LogsGroupByMissing and assigns it to the Missing field.
func (o *LogsGroupBy) SetMissing(v LogsGroupByMissing) {
	o.Missing = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *LogsGroupBy) GetSort() LogsAggregateSort {
	if o == nil || o.Sort == nil {
		var ret LogsAggregateSort
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetSortOk() (*LogsAggregateSort, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *LogsGroupBy) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given LogsAggregateSort and assigns it to the Sort field.
func (o *LogsGroupBy) SetSort(v LogsAggregateSort) {
	o.Sort = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *LogsGroupBy) GetTotal() LogsGroupByTotal {
	if o == nil || o.Total == nil {
		var ret LogsGroupByTotal
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsGroupBy) GetTotalOk() (*LogsGroupByTotal, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *LogsGroupBy) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given LogsGroupByTotal and assigns it to the Total field.
func (o *LogsGroupBy) SetTotal(v LogsGroupByTotal) {
	o.Total = &v
}

func (o LogsGroupBy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["facet"] = o.Facet
	}
	if o.Histogram != nil {
		toSerialize["histogram"] = o.Histogram
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Missing != nil {
		toSerialize["missing"] = o.Missing
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableLogsGroupBy struct {
	value *LogsGroupBy
	isSet bool
}

func (v NullableLogsGroupBy) Get() *LogsGroupBy {
	return v.value
}

func (v *NullableLogsGroupBy) Set(val *LogsGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsGroupBy(val *LogsGroupBy) *NullableLogsGroupBy {
	return &NullableLogsGroupBy{value: val, isSet: true}
}

func (v NullableLogsGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
