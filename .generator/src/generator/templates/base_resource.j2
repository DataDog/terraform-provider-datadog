{%- import "utils/schema_helper.j2" as schemaMacros %}

{%- set apiName = operations[GET_OPERATION]["schema"]["tags"][0].replace(" ", "") + "Api" %}
{%- set getOperationId = operations[GET_OPERATION]["schema"]["operationId"] %}
{%- set updateOperationId = operations[UPDATE_OPERATION]["schema"]["operationId"] %}
{%- set createOperationId = operations[CREATE_OPERATION]["schema"]["operationId"] %}
{%- set deleteOperationId = operations[DELETE_OPERATION]["schema"]["operationId"] %}
{%- set readOperationParams = operations[GET_OPERATION]["schema"]|parameters %}
{%- set createOperationParams = operations[CREATE_OPERATION]["schema"]|parameters %}
{%- set updateOperationParams = operations[UPDATE_OPERATION]["schema"]|parameters %}
{%- set deleteOperationParams = operations[DELETE_OPERATION]["schema"]|parameters %}
{%- set primaryId = get_terraform_primary_id(operations) %}

package datadog

import (
	"context"
	"strconv"

	"github.com/terraform-providers/terraform-provider-datadog/datadog/internal/utils"

	"github.com/DataDog/datadog-api-client-go/v2/api/datadog{{ version|upperfirst }}"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceDatadog{{ name|camel_case }}() *schema.Resource {
	return &schema.Resource{
		Description:   "Provides a Datadog {{ name|camel_case }} resource. This can be used to create and manage Datadog {{ name }}.",
		ReadContext:   resourceDatadog{{ name|camel_case }}Read,
		CreateContext: resourceDatadog{{ name|camel_case }}Create,
		UpdateContext: resourceDatadog{{ name|camel_case }}Update,
		DeleteContext: resourceDatadog{{ name|camel_case }}Delete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			{%- for name, parameter in createOperationParams.items() %}
				{%- if name != primaryId["name"] %}
					{%- set parameterSchema = parameter|parameter_schema %}
					{%- if parameterSchema|is_json_api %}
						{%- set jsonAttributeSchema = get_json_api_attributes_schema(parameterSchema) %}
						{%- for attr, schema in jsonAttributeSchema.properties.items() %}
							{%- set isRequired = attr in jsonAttributeSchema.get("required", []) %}
							{{- schemaMacros.baseSchema(attr, schema, required=isRequired) }}
						{%- endfor %}
					{%- else %}
						{{- schemaMacros.baseSchema(name, parameterSchema, required=parameter.get("required")) }}
					{%- endif %}
				{% endif%}
			{%- endfor %}
		},
	}
}

{% include "read_method.j2" %}

{% include "create_method.j2" %}

{% include "update_method.j2" %}

{% include "delete_method.j2" %}

{% include "update_state_method.j2" %}
