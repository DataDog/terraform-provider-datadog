{%- macro baseRequestAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- if schema|is_primitive %}
        {{ basePrimitiveAttrBuilder(name=name, schema=schema, baseSetter=baseSetter, required=required) }}
    {%- elif schema.type == "object" %}
    {%- elif schema.type == "array" %}
        {%- set itemSchema = schema.get("items") %}
        {%- if "enum" not in itemSchema and itemSchema|is_primitive %}
            {{ name|variable_name }} := []{{ itemSchema|simple_type }}{}
        {%- else %}
            {{ name|variable_name }} := []datadog{{ version|upperfirst }}.{{ get_type(itemSchema) }}{}
        {%- endif %}
        for _, s := range d.Get("{{ name }}").([]interface{}) {
            {{- baseArrayAttrBuilder(name=name, schema=schema, baseGetter="s", baseSetter=baseSetter, required=required) }}
        }
        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {% endif %}
{%- endmacro %}

{%- macro basePrimitiveAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- if required %}
        {{ baseSetter }}.Set{{ name|camel_case }}(d.Get("{{ name }}").({{ schema|simple_type }}))

    {%- else %}
        if {{ name|variable_name }}, ok := d.GetOk("{{ name }}"); ok {
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }}.({{ schema|simple_type }}))
        }
    {%- endif %}
{%- endmacro %}

{%- macro basePrimitiveAttrBuilder(name, schema, baseSetter, required=False) %}
    {%- set simpleType = schema|simple_type %}
    {%- if required %}
        {%- if simpleType in ["int", "string", "bool"] %}
            {{ baseSetter }}.Set{{ name|camel_case }}(d.Get("{{ name }}").({{ simpleType }}))
        {%- elif simpleType == "int64" %}
            {{ name|variable_name }}, _ := strconv.ParseInt(d.Get("{{ name }}"), 10, 64)
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
        {%- endif %}
    {%- else %}
        if {{ name|variable_name }}, ok := d.GetOk("{{ name }}"); ok {
        {%- if simpleType in ["int", "string", "bool"] %}
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }}.({{ simpleType }}))
        {%- elif simpleType == "int64" %}
            {{ name|variable_name }}, _ := strconv.ParseInt({{ name|variable_name }}, 10, 64)
            {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
        {%- endif %}
        }
    {%- endif %}
{%- endmacro %}

{%- macro baseArrayAttrBuilder(name, schema, baseGetter, baseSetter, required=False) %}
    {%- set itemSchema = schema.get("items") %}
    {%- if itemSchema|is_primitive %}
        {%- if "enum" in itemSchema %}
        {{ get_type(itemSchema)|variable_name }}Item, _ := datadogV2.New{{ get_type(itemSchema) }}FromValue(s.({{ itemSchema|simple_type }}))
        {{ name|variable_name }} = append( {{ name|variable_name }}, *{{ get_type(itemSchema)|variable_name }}Item)
        {%- else %}
        {{ name|variable_name }} = append( {{ name|variable_name }}, {{ baseGetter }}.({{ itemSchema|simple_type }}))
        {%- endif %}
    {%- elif itemSchema.type == "object" %}
        {{ baseGetter }}Map := s.(map[string]interface{})
        {{ name|variable_name }}Item := datadog{{ version|upperfirst }}.New{{ get_type(itemSchema) }}WithDefaults()
        {%- for attr, attrSchema in itemSchema.get("properties").items() %}
            {%- set isRequired = attr in itemSchema.get("required", []) %}
            {{- objectFromMapBuilder(attr, attrSchema, baseGetter~"Map", name|variable_name~"Item", required=isRequired) }}
        {%- endfor %}

        {{ name|variable_name }} = append({{ name|variable_name }}, *{{ name|variable_name }}Item)
    {%- elif itemSchema.type == "array" %}

    {%- endif %}
{%- endmacro %}

{%- macro objectFromMapBuilder(name, schema, baseGetter, baseSetter, required=False) %}
    {%- if schema|is_primitive %}
        {{ baseSetter }}.Set{{ name|camel_case }}({{ baseGetter }}["{{ name }}"].({{ get_type(schema) }}))
    {%- elif schema.type == "object" %}
        {{ name|variable_name }} := datadog{{ version|upperfirst }}.New{{ get_type(schema) }}WithDefaults()
        {%- for attr, attrSchema in schema.get("properties").items() %}
            {%- set isRequired = attr in itemSchema.get("required", []) %}
            {{- objectFromMapBuilder(attr, attrSchema, name|variable_name~"Item", required=isRequired) }}
        {%- endfor %}
        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {%- elif schema.type == "array" %}

        {{ name|variable_name }} := []{{ schema.get("items")|simple_type }}{}
        for _, {{ name|variable_name }}Item := range {{ baseGetter }}["{{ name }}"].([]interface{}) {
            {{- baseArrayAttrBuilder(name=name, schema=schema, baseGetter=name|variable_name~"Item", baseSetter=name|variable_name, required=required) }}
        }
        {{ baseSetter }}.Set{{ name|camel_case }}({{ name|variable_name }})
    {%- endif %}
{%- endmacro %}