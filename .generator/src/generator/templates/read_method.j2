func resourceDatadog{{ name|camel_case }}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	providerConf := meta.(*ProviderConfiguration)
	apiInstances := providerConf.DatadogApiInstances
	auth := providerConf.Auth
	{%- for name, param in readOperationParams.items() %}
		{%- set paramSchema = get_type_for_parameter(param) %}
		{%- if name == primaryId["name"] %}
		id := d.Id()
		{%- else%}
		{{ name|variable_name }} := d.Get("{{ name }}").({{ paramSchema }})
		{%- endif %}
	{%- endfor %}

	resp, httpResp, err := apiInstances.Get{{ apiName }}{{ version|upperfirst }}().{{ getOperationId }}(auth, {% for name, param in readOperationParams.items() %}{% if name == primaryId["name"] %}id,{% else %}{{ name|variable_name }},{% endif%}{% endfor%})
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			// Delete the resource from the local state since it doesn't exist anymore in the actual state
			d.SetId("")
			return nil
		}
		return utils.TranslateClientErrorDiag(err, httpResp, "error calling {{ getOperationId }}")
	}
	if err := utils.CheckForUnparsed(resp); err != nil {
		return diag.FromErr(err)
	}

	return update{{ name|camel_case }}State(d, &resp)
}