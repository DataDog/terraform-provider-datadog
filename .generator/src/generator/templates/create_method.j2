{%- import "utils/request_builder_helper.j2" as requestBuilderMacros %}

func resourceDatadog{{ name|camel_case }}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	providerConf := meta.(*ProviderConfiguration)
	apiInstances := providerConf.DatadogApiInstances
	auth := providerConf.Auth
	{%- for paramName, param in createOperationParams.items() %}
		{% if paramName == "body" %}
		body := build{{ name|camel_case }}RequestBody(d)
		{% elif paramName == primaryId["name"] %}
		id := d.Id()
		{%- else%}
		{{ paramName|variable_name }} := d.Get("{{ paramName }}").({{ get_type_for_parameter(param) }})
		{%- endif %}
	{%- endfor %}

	resp, httpResp, err := apiInstances.Get{{ apiName }}{{ version|upperfirst }}().{{ createOperationId }}(auth, {% for paramName, param in createOperationParams.items() %}{% if paramName == primaryId["name"] %}id{% else %}{% if paramName == "body" %}*{% endif %}{{ paramName|variable_name }}{% endif %}, {% endfor%})
	if err != nil {
		return utils.TranslateClientErrorDiag(err, httpResp, "error creating {{ name|camel_case }}")
	}
	if err := utils.CheckForUnparsed(resp); err != nil {
		return diag.FromErr(err)
	}
	d.SetId(resp.Data.GetId())

	return update{{ name|camel_case }}State(d, &resp)
}

func build{{ name|camel_case }}RequestBody(d *schema.ResourceData) *datadog{{ version|upperfirst }}.{{ get_type_for_parameter(createOperationParams["body"]) }} {
	{%- set parameterBodySchema = createOperationParams["body"]|parameter_schema %}
    {%- set parameterBodyDataSchema = parameterBodySchema.properties.data %}
    {%- set isDataRequired = "data" in parameterBodySchema.get("required", []) %}
	{%- if parameterBodySchema|is_json_api %}
	{%- set jsonAttributeSchema = get_json_api_attributes_schema(parameterBodySchema) %}
	attributes := datadog{{ version|upperfirst }}.New{{ get_type(jsonAttributeSchema) }}WithDefaults()

	{%- for attr, schema in jsonAttributeSchema.properties.items() %}
		{%- set isRequired = attr in jsonAttributeSchema.get("required", []) %}
		{{- requestBuilderMacros.baseRequestAttrBuilder(attr, schema, "attributes", required=isRequired) }}
	{%- endfor %}
	{%- endif %}

	req := datadogV2.New{{ get_type(parameterBodySchema) }}WithDefaults()
	req.Data = {% if isDataRequired %}*{% endif %}datadogV2.New{{ get_type(parameterBodyDataSchema) }}WithDefaults()
	req.Data.SetAttributes(*attributes)

	return req
}